{"version":3,"file":"static/js/738.97a0bbcb.chunk.js","mappings":"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","sources":["pages/StatisticsPage/StatisticsPage.styled.js","components/StatisticsChart/StatisticsChart.js","components/StatisticsChart/StatisticsInfo/StatisticsInfo.styled.js","components/StatisticsChart/StatisticsInfo/StatisticsInfo.js","pages/StatisticsPage/StatisticsPage.js"],"sourcesContent":["import styled from 'styled-components';\n\n// 1280-1440 десктоп\n// 768-1279 таблетка\n// 375-767 мобилка\n// До 375 тянутся\n\nexport const GeneralContainer = styled.div`\n  padding: 134px 114px 105px 114px;\n  background-color: white;\n  border-radius: 16px;\n\n  @media screen and (min-width: 768px) and (max-width: 1279) {\n    padding: 132px 32px 224px 32px;\n  }\n`;\n\nexport const BoxPagination = styled.div`\n  display: flex;\n  justify-content: space-around;\n  gap: 328px;\n  align-items: center;\n  margin-bottom: 40px;\n`;\n\nexport const Container = styled.div`\n  width: 860px;\n  height: 440px;\n  margin: auto;\n\n  text-align: center;\n  padding: 40px;\n  border: 0.8px solid #e3f3ff;\n  border-radius: 29px;\n`;\n\nexport const Text = styled.p`\n  color: #343434;\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 150%;\n  text-align: left;\n`;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from 'recharts';\n\nconst StatisticsChart = ({ date, tasks }) => {\n  const { t } = useTranslation();\n\n  const [tasksStatistic, setTasksStatistic] = useState([]);\n\n  const getProcentTaskStatistic = useCallback(arr => {\n    const checkTasksPercent = percent => (isFinite(percent) ? percent : 0);\n\n    let toDo = 0;\n    let inProgress = 0;\n    let done = 0;\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i].category === 'to-do') {\n        toDo++;\n      } else if (arr[i].category === 'in-progress') {\n        inProgress++;\n      } else {\n        done++;\n      }\n    }\n\n    const todoProc = checkTasksPercent(Math.floor((toDo * 100) / arr.length));\n    const inProgressProc = checkTasksPercent(\n      Math.floor((inProgress * 100) / arr.length)\n    );\n    const doneProc = checkTasksPercent(Math.floor((done * 100) / arr.length));\n\n    return [todoProc, inProgressProc, doneProc];\n  }, []);\n\n  useEffect(() => {\n    const data = [\n      {\n        name: `${t('statistics.ToDo')}`,\n        day: 0,\n        month: 0,\n      },\n      {\n        name: `${t('statistics.InProgress')}`,\n        day: 0,\n        month: 0,\n      },\n      {\n        name: `${t('statistics.Done')}`,\n        day: 0,\n        month: 0,\n      },\n    ];\n    const filteredDatesByMonth = tasks.filter(\n      task => new Date(task.date).getMonth() === date.getMonth()\n    );\n\n    const filteredDatesByDay = tasks.filter(\n      task => new Date(task.date).getDate() === date.getDate()\n    );\n\n    const statisticMonth = getProcentTaskStatistic(filteredDatesByMonth);\n    const statisticDay = getProcentTaskStatistic(filteredDatesByDay);\n\n    data[0].month = statisticMonth[0];\n    data[1].month = statisticMonth[1];\n    data[2].month = statisticMonth[2];\n\n    data[0].day = statisticDay[0];\n    data[1].day = statisticDay[1];\n    data[2].day = statisticDay[2];\n\n    setTasksStatistic(data);\n  }, [date, getProcentTaskStatistic, tasks, t]);\n\n  const renderLabel = props => {\n    const { x, y, width, value } = props;\n    return (\n      <text x={x + width / 2} y={y} fill=\"#black\" textAnchor=\"middle\" dy={-6}>\n        {value}%\n      </text>\n    );\n  };\n\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart\n        data={tasksStatistic}\n        barCategoryGap={75}\n        barGap={5}\n        maxBarSize={27}\n        margin={{\n          top: 35,\n          right: 10,\n          left: 10,\n          bottom: 10,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"0\" vertical={false} stroke=\"#E3F3FF\" />\n        <XAxis dataKey=\"name\" tickMargin={16} tickLine={false} />\n        <YAxis\n          axisLine={false}\n          tickLine={false}\n          tickCount={6}\n          type=\"number\"\n          position=\"left\"\n          ticks={[0, 20, 40, 60, 80, 100]}\n          tickMargin={35}\n        />\n        <Tooltip cursor={{ fill: 'transparent' }} />\n        <Bar\n          name={t('statistics.Day')}\n          dataKey=\"day\"\n          unit=\"%\"\n          fill=\"url(#gradient)\"\n          label={{ content: renderLabel }}\n          radius={[0, 0, 10, 10]}\n        />\n        <defs>\n          <linearGradient id=\"gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#FFD2DD\" stopOpacity={0.1} />\n            <stop offset=\"95%\" stopColor=\"#FFD2DD\" stopOpacity={1} />\n          </linearGradient>\n        </defs>\n        <Bar\n          name={t('statistics.Month')}\n          dataKey=\"month\"\n          unit=\"%\"\n          fill=\"url(#gradient2)\"\n          label={{ content: renderLabel }}\n          radius={[0, 0, 10, 10]}\n        />\n        <defs>\n          <linearGradient id=\"gradient2\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#3E85F3\" stopOpacity={0.1} />\n            <stop offset=\"95%\" stopColor=\"#3E85F3\" stopOpacity={1} />\n          </linearGradient>\n        </defs>\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default StatisticsChart;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  gap: 36px;\n`;\n\nexport const ListItem = styled.li`\n  position: relative;\n\n  &::before {\n    content: '';\n    position: absolute;\n    left: -16px;\n    bottom: 5px;\n    display: inline-block;\n    border-radius: 8px;\n    width: 8px;\n    height: 8px;\n  }\n\n  &:first-child::before {\n    background-color: #ffd2dd;\n  }\n\n  &:last-child::before {\n    background-color: #3e85f3;\n  }\n`;\n\nexport const Text = styled.p`\n  color: #343434;\n  font-size: 16px;\n  font-family: Inter;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 18px;\n`;\n","import { List, ListItem, Text } from './StatisticsInfo.styled';\nimport { useTranslation } from 'react-i18next';\n\n\nexport const StatisticsInfo = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div>\n      <List>\n        <ListItem>\n          <Text>{t('statistics.ByDay')}</Text>\n        </ListItem>\n        <ListItem>\n          <Text>{t('statistics.ByMonth')}</Text>\n        </ListItem>\n      </List>\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Container,\n  Text,\n  BoxPagination,\n  GeneralContainer,\n} from './StatisticsPage.styled';\nimport { PeriodPaginator } from 'components/CalendarToolbar/PeriodPaginator/PeriodPaginator';\nimport StatisticsChart from '../../components/StatisticsChart/StatisticsChart';\nimport { selectAllTasks } from 'redux/task/selectors';\nimport { useFeatchTasksByMonth } from 'hooks/useFeatchTasksByMonth';\nimport { useDate } from 'hooks/useDate';\nimport { StatisticsInfo } from 'components/StatisticsChart/StatisticsInfo/StatisticsInfo';\n\nconst StatisticsPage = () => {\n  const { t } = useTranslation();\n  const [date, setNewDate] = useDate();\n  useFeatchTasksByMonth();\n  const tasks = useSelector(selectAllTasks);\n\n  return (\n    <GeneralContainer>\n      <BoxPagination>\n        <PeriodPaginator\n          minDate={'Jun 23 2023'}\n          date={date}\n          setDate={setNewDate}\n          typenav={'day'}\n        />\n        <StatisticsInfo />\n      </BoxPagination>\n      <Container>\n        <Text>{t('statistics.Tasks')}</Text>\n        <StatisticsChart date={date} tasks={tasks} />\n      </Container>\n    </GeneralContainer>\n  );\n};\n\nexport default StatisticsPage;\n"],"names":["GeneralContainer","styled","BoxPagination","Container","Text","date","tasks","t","useTranslation","useState","tasksStatistic","setTasksStatistic","getProcentTaskStatistic","useCallback","arr","checkTasksPercent","percent","isFinite","toDo","inProgress","done","i","length","category","Math","floor","useEffect","data","name","day","month","filteredDatesByMonth","filter","task","Date","getMonth","filteredDatesByDay","getDate","statisticMonth","statisticDay","renderLabel","props","x","y","width","value","fill","textAnchor","dy","ResponsiveContainer","height","BarChart","barCategoryGap","barGap","maxBarSize","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","vertical","stroke","XAxis","dataKey","tickMargin","tickLine","YAxis","axisLine","tickCount","type","position","ticks","Tooltip","cursor","Bar","unit","label","content","radius","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","List","ListItem","StatisticsInfo","useDate","setNewDate","useFeatchTasksByMonth","useSelector","selectAllTasks","PeriodPaginator","minDate","setDate","typenav"],"sourceRoot":""}