{"version":3,"file":"static/js/663.8eeca637.chunk.js","mappings":"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","sources":["components/Modal/Modal.styled.jsx","components/Modal/Modal.js","components/VisionIconsLogIn/VisionIconsLogIn.js","components/ResendMailVerifyBtn/ResendMailVerifyBtn.styled.jsx","components/ResendMailVerifyBtn/ResendMailVerifyBtn.js","components/ResendMailVerifyModal/ResendMailVerifyModal.styled.jsx","components/ResendMailVerifyModal/ResendMailVerifyModal.js","pages/Register/Register.js","pages/Register/Register.styled.jsx","redux/modal/selector.js"],"sourcesContent":["import styled from 'styled-components';\nimport { IoMdClose } from 'react-icons/io';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1200;\n  background-color: rgba(0, 0, 0, 0.5);\n`;\n\nexport const ModalContainer = styled.div`\n  position: relative;\n  box-sizing: border-box;\n  width: auto;\n  height: auto;\n  border-radius: 8px;\n  border: 1px solid ${props => props.theme.colors.modalBorderColor};\n  background: ${props => props.theme.colors.modalBgColor};\n  box-shadow: 0px 4px 16px 0px #1111111a;\n`;\n\nexport const CloseIcon = styled(IoMdClose)`\n  position: absolute;\n  top: 18px;\n  right: 18px;\n  width: 24px;\n  height: 24px;\n  color: ${props => props.theme.colors.notFoundTextColor};\n  cursor: pointer;\n  transition: color 0.5s ease;\n  \n  &:hover {\n    color: #3e85f3;\n  }\n`;\n","import { createPortal } from 'react-dom';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { toggleModal } from 'redux/modal/modalSlice';\nimport { Backdrop, ModalContainer, CloseIcon } from \"./Modal.styled\";\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const Modal = ({children}) => {\n  const dispatch = useDispatch();\n  const handleToggleModal = () => dispatch(toggleModal());\n\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Escape') {\n        handleToggleModal();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return createPortal(\n    <Backdrop>\n      <ModalContainer>\n        <CloseIcon onClick={handleToggleModal}></CloseIcon>\n        {children}\n      </ModalContainer>\n    </Backdrop>,\n    modalRoot\n  );\n};\n","export default function VisionIconsLogIn({ type }) {\n  return (\n    <>\n      {type === 'password' ? (\n        <svg width={30} height={30}>\n          <use\n            xlinkHref={\n              process.env.PUBLIC_URL + '/images/sprite.svg#icon-show-password'\n            }\n            fill=\"#3E85F3\"\n          />\n        </svg>\n      ) : (\n        <svg width={30} height={30}>\n          <use\n            xlinkHref={\n              process.env.PUBLIC_URL + '/images/sprite.svg#icon-close-password'\n            }\n            fill=\"#3E85F3\"\n          />\n        </svg>\n      )}\n    </>\n  );\n}\n","import styled from 'styled-components';\n\nexport const ResendBtn = styled.button`\n  width: 230px;\n  margin-top: 20px;\n  margin-left: 10px;\n  margin-right: 10px;\n  padding: 10px;\n  transition: background-color 0.25s cubic-bezier(0.4, 0, 0.2, 1) 0s;\n  \n  &:hover {\n    background-color: ${props => props.theme.colors.buttonsHoverColor};\n  }\n\n  @media (min-width: 320px) {\n    width: auto;\n  }\n  @media (min-width: 380px) {\n    width: 260px;\n  }\n  @media (min-width: 768px) {\n    width: 400px;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch} from 'react-redux';\nimport { toggleModal } from 'redux/modal/modalSlice';\nimport { ResendBtn } from './ResendMailVerifyBtn.styled';\n\nexport const ResendMailVerifyBtn = () => {\n  const [isHovered, setIsHovered] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleMouseEnter = () => {\n    setIsHovered(true);\n  };\n\n  const handleMouseLeave = () => {\n    setIsHovered(false);\n  };\n\n  const handleToggleModal = () => {\n    dispatch(toggleModal());\n  };\n\n  return (\n    <>\n      <ResendBtn\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        onClick={handleToggleModal}\n        type=\"button\"\n      >\n        {isHovered\n          ? 'Resend Mail'\n          : 'Problems with the mail verification letter?'}\n      </ResendBtn>\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport { Formik, Form, Field } from 'formik';\n\nexport const FormikWrapper = styled(Formik)`\n  transition: 0.3s ease;\n`;\n\nexport const ResendVerifyForm = styled(Form)`\n  padding: 0px;\n  margin: 0 auto;\n  border-radius: 8px;\n\n  display: flex;\n  flex-direction: column;\n  background-color: #ffffff;\n  transition: 0.3s ease;\n\n  @media (min-width: 320px) {\n    width: 100%;\n    padding: 10px;\n  }\n  @media (min-width: 375px) {\n    width: 300px;\n    padding: 20px;\n  }\n  @media (min-width: 768px) {\n    width: 480px;\n    padding: 40px;\n  }\n`;\n\nexport const EmailNameOfInput = styled.span`\n  font-family: 'Inter', sans-serif;\n  font-weight: 600;\n  font-size: 14px;\n\n  color: #111111;\n`;\n\nexport const EmailInput = styled(Field)`\n  height: 54px;\n  border-radius: 8px;\n  border: 1px solid #11111126;\n  padding: 18px;\n  transition: border 0.5s ease;\n  margin-top: 10px;\n\n  &:hover,\n  &:focus {\n    border: 1px solid #111111;\n  }\n  &.main {\n    border: 1px solid #11111126;\n  }\n  &.fail {\n    border: 1px solid ${props => props.theme.colors.inputError};\n  }\n  &.good {\n    border: 1px solid #3cbc81;\n  }\n\n  ::placeholder,\n  ::-webkit-input-placeholder {\n    color: #dce3e5;\n  }\n  :-ms-input-placeholder {\n    color: #dce3e5;\n  }\n\n  @media (min-width: 320px) {\n    width: 100%;\n  }\n  @media (min-width: 375px) {\n    width: 100%;\n  }\n  @media (min-width: 1280px) {\n    width: 400px;\n  }\n`;\n\nexport const ResendSubmit = styled.button`\n  padding: 10px;\n  border-radius: 16px;\n  height: auto;\n  margin-top: 10px;\n  margin-left: auto;\n  margin-right: auto;\n\n  &:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n  }\n`;\n","import { Modal } from 'components/Modal/Modal';\nimport { useDispatch } from 'react-redux';\nimport { toggleModal } from 'redux/modal/modalSlice';\nimport * as yup from 'yup';\nimport {\n  EmailInput,\n  EmailNameOfInput,\n  FormikWrapper,\n  ResendSubmit,\n  ResendVerifyForm,\n} from './ResendMailVerifyModal.styled';\nimport { resendVerifyMail } from 'redux/auth/operations';\n\nconst emailSchema = yup.object().shape({\n  email: yup.string().email('Incorrect email!').required('Email is required'),\n});\n\nconst initialValues = {\n  email: '',\n};\n\nexport const ResendMailVerifyModal = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = async ({ email }) => {\n    const answer = await dispatch(resendVerifyMail(email));\n\n    if (answer.error) {\n      return;\n    }\n\n    dispatch(toggleModal());\n  };\n\n  return (\n    <Modal>\n      <FormikWrapper\n        initialValues={initialValues}\n        validationSchema={emailSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ dirty, isValid }) => (\n          <ResendVerifyForm>\n            <div>\n              <EmailNameOfInput>Email</EmailNameOfInput>\n              <EmailInput\n                type=\"email\"\n                id=\"email\"\n                name=\"email\"\n                placeholder=\"Enter your email\"\n              />\n            </div>\n            {dirty && (\n              <ResendSubmit type=\"submit\" disabled={!isValid}>\n                Submit\n              </ResendSubmit>\n            )}\n          </ResendVerifyForm>\n        )}\n      </FormikWrapper>\n    </Modal>\n  );\n};\n","import VisionIconsLogIn from 'components/VisionIconsLogIn/VisionIconsLogIn';\n\nimport { useTranslation } from 'react-i18next';\nimport { ToasterNotify } from 'components/Notify/Notify';\nimport { ResendMailVerifyBtn } from 'components/ResendMailVerifyBtn/ResendMailVerifyBtn';\nimport { ResendMailVerifyModal } from 'components/ResendMailVerifyModal/ResendMailVerifyModal';\nimport { Toaster } from 'react-hot-toast';\nimport { BiLogIn } from 'react-icons/bi';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectShowModal } from 'redux/modal/selector';\nimport { register } from '../../redux/auth/operations';\n\nimport {\n  ContainerRegisterForm,\n  DivIconToglePassword,\n  LogInBtn,\n  LogInBtnText,\n  RegisterForm,\n  RegisterInput,\n  RegisterNameOfInput,\n  RegisterSubmitBtn,\n  RegisterTitle,\n  Registerlabel,\n} from './Register.styled';\n\nexport default function Register() {\n  const { t } = useTranslation();\n\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const isShowModalWindow = useSelector(selectShowModal);\n\n  const [type, setType] = useState('password');\n  const [borderColorNameInpt, setBorderColorNameInpt] = useState('main');\n  const [borderColorMailInpt, setBorderColorMailInpt] = useState('main');\n  const [borderColorPassInpt, setBorderColorPassInpt] = useState('main');\n\n  function validationName(inputText) {\n    if (inputText.length >= 16) {\n      setBorderColorNameInpt('fail');\n      ToasterNotify(`${t('notifications.ErrorName')}`);\n      return false;\n    } else {\n      setBorderColorNameInpt('good');\n      return true;\n    }\n  }\n\n  function validateEmail(inputText) {\n    const mailFormat = /\\S+@\\S+\\.\\S+/;\n\n    if (inputText.match(mailFormat)) {\n      setBorderColorMailInpt('good');\n      return true;\n    } else {\n      setBorderColorMailInpt('fail');\n      ToasterNotify(`${t('notifications.ErrorEmail')}`);\n      return false;\n    }\n  }\n\n  function validatePassword(inputText) {\n    const isValidLength = /^.{6,16}$/;\n    if (!isValidLength.test(inputText)) {\n      ToasterNotify(`${t('notifications.ErrorPasswordLong')}`);\n      setBorderColorPassInpt('fail');\n      return false;\n    }\n    const isNonWhiteSpace = /^\\S*$/;\n    if (!isNonWhiteSpace.test(inputText)) {\n      ToasterNotify(`${t('notifications.ErrorPasswordSpace')}`);\n      setBorderColorPassInpt('fail');\n      return false;\n    }\n\n    const isContainsUppercase = /^(?=.*[A-Z]).*$/;\n    if (!isContainsUppercase.test(inputText)) {\n      ToasterNotify(`${t('notifications.ErrorPasswordUppercase')}`);\n      setBorderColorPassInpt('fail');\n      return false;\n    }\n\n    const isContainsLowercase = /^(?=.*[a-z]).*$/;\n    if (!isContainsLowercase.test(inputText)) {\n      ToasterNotify(`${t('notifications.ErrorPasswordLowercase')}`);\n      setBorderColorPassInpt('fail');\n      return false;\n    }\n\n    const isContainsNumber = /^(?=.*[0-9]).*$/;\n    if (!isContainsNumber.test(inputText)) {\n      ToasterNotify(`${t('notifications.ErrorPasswordDigit')}`);\n      setBorderColorPassInpt('fail');\n      return false;\n    } else {\n      setBorderColorPassInpt('good');\n      return true;\n    }\n  }\n\n  function isValidateForm() {\n    if (!validationName(name)) {\n      return false;\n    }\n    if (!validateEmail(email)) {\n      return false;\n    }\n    if (!validatePassword(password)) {\n      return false;\n    }\n    return true;\n  }\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'email':\n        return setEmail(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (isValidateForm()) {\n      setBorderColorNameInpt('good');\n      setBorderColorMailInpt('good');\n      setBorderColorPassInpt('good');\n      dispatch(register({ name, email, password }));\n      setEmail('');\n      setName('');\n      setPassword('');\n    }\n  };\n\n  function togglePassInput() {\n    if (type === 'password') {\n      setType('text');\n    }\n    if (type === 'text') {\n      setType('password');\n    }\n  }\n\n  return (\n    <ContainerRegisterForm>\n      <RegisterForm onSubmit={handleSubmit} autoComplete=\"off\">\n        <RegisterTitle>{t('loginRegisterForm.SignUp')}</RegisterTitle>\n        <RegisterNameOfInput>{t('loginRegisterForm.Name')}</RegisterNameOfInput>\n        <Registerlabel>\n          <RegisterInput\n            id=\"reg\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            className={` ${borderColorNameInpt}`}\n            placeholder=\"Enter your name\"\n            onChange={handleChange}\n          />\n        </Registerlabel>\n        <RegisterNameOfInput>{t('loginRegisterForm.Email')}</RegisterNameOfInput>\n        <Registerlabel>\n          <RegisterInput\n            id=\"reg\"\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            className={` ${borderColorMailInpt}`}\n            placeholder=\"Enter email\"\n            onChange={handleChange}\n          />\n        </Registerlabel>\n        <RegisterNameOfInput>{t('loginRegisterForm.Password')}</RegisterNameOfInput>\n        <Registerlabel>\n          <RegisterInput\n            id=\"reg\"\n            type={type}\n            name=\"password\"\n            value={password}\n            className={` ${borderColorPassInpt}`}\n            placeholder=\"Enter password\"\n            onChange={handleChange}\n          />\n          <DivIconToglePassword type=\"button\" onClick={togglePassInput}>\n            <VisionIconsLogIn type={type} />\n          </DivIconToglePassword>\n        </Registerlabel>\n\n        <RegisterSubmitBtn type=\"submit\">\n          {t('btn.SignUp')}\n          <BiLogIn size={20} />\n        </RegisterSubmitBtn>\n        <Toaster />\n      </RegisterForm>\n\n      <LogInBtn to={'/login'} type=\"button\">\n        <LogInBtnText>{t('btn.LogIn')}</LogInBtnText>\n      </LogInBtn>\n\n      <ResendMailVerifyBtn />\n\n      {isShowModalWindow && <ResendMailVerifyModal />}\n    </ContainerRegisterForm>\n  );\n}\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nconst URL = process.env.PUBLIC_URL;\n\nexport const ContainerRegisterForm = styled.div`\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n\n  @media (min-width: 320px) {\n    background-color: #ffffff;\n  }\n\n  @media (min-width: 375px) {\n    background-color: ${props => props.theme.colors.secondBlueColor};\n  }\n\n  @media (min-width: 1280px) {\n    background-image: url(${URL}/images/goose_auth-desctop/goose_auth-desctop.png);\n    background-size: 400px 416px;\n    background-repeat: no-repeat;\n    background-position: 0% 100%;\n  }\n`;\n\nexport const RegisterForm = styled.form`\n  padding: 0px;\n  margin: 0 auto;\n  border-radius: 8px;\n  margin-bottom: 24px;\n\n  display: flex;\n  flex-direction: column;\n  background-color: #ffffff;\n  position: relative;\n\n  @media (min-width: 320px) {\n    width: 100%;\n    padding: 10px;\n  }\n  @media (min-width: 375px) {\n    width: 300px;\n    padding: 20px;\n  }\n  @media (min-width: 768px) {\n    width: 480px;\n    padding: 40px;\n  }\n`;\n\nexport const RegisterInput = styled.input`\n  height: 54px;\n  border-radius: 8px;\n  border: 1px solid #11111126;\n  padding: 18px;\n  transition: border 0.5s ease;\n\n  &:hover,\n  &:focus {\n    border: 1px solid #111111;\n  }\n  &.main {\n    border: 1px solid #11111126;\n  }\n  &.fail {\n    border: 1px solid #e74a3b;\n  }\n  &.good {\n    border: 1px solid #3cbc81;\n  }\n\n  ::placeholder,\n  ::-webkit-input-placeholder {\n    color: #dce3e5;\n  }\n  :-ms-input-placeholder {\n    color: #dce3e5;\n  }\n\n  @media (min-width: 320px) {\n    width: 100%;\n  }\n  @media (min-width: 375px) {\n    width: 100%;\n  }\n  @media (min-width: 1280px) {\n    width: 400px;\n  }\n`;\nexport const Registerlabel = styled.label`\n  position: relative;\n  &:nth-child(7) {\n    margin-bottom: 48px;\n  }\n\n  &:nth-child(-n + 5) {\n    margin-bottom: 18px;\n  }\n`;\nexport const RegisterTitle = styled.h1`\n  font-family: 'Inter', sans-serif;\n  font-weight: 600;\n  font-size: 24px;\n\n  color: #3e85f3;\n  margin-bottom: 40px;\n`;\nexport const RegisterNameOfInput = styled.span`\n  font-family: 'Inter', sans-serif;\n  font-weight: 600;\n  font-size: 14px;\n\n  color: #111111;\n  margin-bottom: 8px;\n`;\n\nexport const RegisterSubmitBtn = styled.button`\n  font-family: 'Inter', sans-serif;\n  font-weight: 600;\n  font-size: 18px;\n\n  height: 56px;\n  width: 100%;\n\n  gap: 11px;\n  background-color: #3e85f3;\n  border: none;\n  border-radius: 16px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  color: #ffffff;\n  cursor: pointer;\n  transition: background-color 0.25s cubic-bezier(0.4, 0, 0.2, 1) 0s;\n\n  &:hover,\n  &:focus {\n    background-color: #2b78ef;\n  }\n`;\n\nexport const LogInBtn = styled(NavLink)`\n  border: none;\n  cursor: pointer;\n  position: relative;\n`;\n\nexport const LogInBtnText = styled.span`\n  font-family: 'Inter', sans-serif;\n  font-weight: 600;\n  font-size: 18px;\n  color: #3e85f3;\n\n  &:after {\n    content: ' ';\n    background: #3e85f3;\n    width: 100%;\n    height: 2px;\n    position: absolute;\n    top: 21px;\n    left: 0px;\n  }\n`;\n\nexport const DivIconToglePassword = styled.div`\n  width: 30px;\n  height: 30px;\n\n  position: absolute;\n  bottom: 11px;\n  right: 11px;\n`;\n","export const selectShowModal = state => state.modal.isOpen;\nexport const modalType = state => state.modal.modalType;\nexport const modalAction = state => state.modal.modalAction;\nexport const getModalTask = state => state.modal.dataTask;\nexport const getCategory = state => state.modal.category;\n"],"names":["Backdrop","styled","ModalContainer","props","theme","colors","modalBorderColor","modalBgColor","CloseIcon","IoMdClose","notFoundTextColor","modalRoot","document","querySelector","Modal","children","dispatch","useDispatch","handleToggleModal","toggleModal","useEffect","handleKeyDown","e","code","window","addEventListener","removeEventListener","createPortal","onClick","VisionIconsLogIn","type","width","height","xlinkHref","process","fill","ResendBtn","buttonsHoverColor","ResendMailVerifyBtn","useState","isHovered","setIsHovered","onMouseEnter","onMouseLeave","FormikWrapper","Formik","ResendVerifyForm","Form","EmailNameOfInput","EmailInput","Field","inputError","ResendSubmit","emailSchema","yup","shape","email","required","initialValues","ResendMailVerifyModal","handleSubmit","resendVerifyMail","error","validationSchema","onSubmit","dirty","isValid","id","name","placeholder","disabled","Register","t","useTranslation","setName","setEmail","password","setPassword","isShowModalWindow","useSelector","selectShowModal","setType","borderColorNameInpt","setBorderColorNameInpt","borderColorMailInpt","setBorderColorMailInpt","borderColorPassInpt","setBorderColorPassInpt","isValidateForm","length","ToasterNotify","inputText","match","validateEmail","test","validatePassword","handleChange","target","value","preventDefault","register","autoComplete","className","onChange","size","to","ContainerRegisterForm","secondBlueColor","RegisterForm","RegisterInput","Registerlabel","RegisterTitle","RegisterNameOfInput","RegisterSubmitBtn","LogInBtn","NavLink","LogInBtnText","DivIconToglePassword","state","modal","isOpen","modalType","modalAction","getModalTask","dataTask","getCategory","category"],"sourceRoot":""}