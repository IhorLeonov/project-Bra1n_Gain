{"version":3,"file":"static/js/645.2249f27e.chunk.js","mappings":"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","sources":["components/ResendMailVerifyBtn/ResendMailVerifyBtn.styled.jsx","components/ResendMailVerifyBtn/ResendMailVerifyBtn.js","components/ResendMailVerifyModal/ResendMailVerifyModal.styled.jsx","components/ResendMailVerifyModal/ResendMailVerifyModal.js","pages/Register/Register.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ResendBtn = styled.button`\n  width: 230px;\n  margin-top: 20px;\n  margin-left: 10px;\n  margin-right: 10px;\n  margin-bottom: 20px;\n  padding: 10px;\n  transition: background-color 0.25s cubic-bezier(0.4, 0, 0.2, 1) 0s;\n  \n  &:hover {\n    background-color: ${props => props.theme.colors.buttonsHoverColor};\n  }\n\n  @media (min-width: 320px) {\n    width: auto;\n  }\n  @media (min-width: 380px) {\n    width: 260px;\n  }\n  @media (min-width: 768px) {\n    width: 400px;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch} from 'react-redux';\nimport { toggleModal } from 'redux/modal/modalSlice';\nimport { ResendBtn } from './ResendMailVerifyBtn.styled';\n\nexport const ResendMailVerifyBtn = () => {\n  const [isHovered, setIsHovered] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleMouseEnter = () => {\n    setIsHovered(true);\n  };\n\n  const handleMouseLeave = () => {\n    setIsHovered(false);\n  };\n\n  const handleToggleModal = () => {\n    dispatch(toggleModal());\n  };\n\n  return (\n    <>\n      <ResendBtn\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        onClick={handleToggleModal}\n        type=\"button\"\n      >\n        {isHovered\n          ? 'Resend Mail'\n          : 'Problems with the mail verification letter?'}\n      </ResendBtn>\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport { Formik, Form, Field } from 'formik';\n\nexport const FormikWrapper = styled(Formik)`\n  transition: 0.3s ease;\n`;\n\nexport const ResendVerifyForm = styled(Form)`\n  padding: 0px;\n  margin: 0 auto;\n  border-radius: 8px;\n\n  display: flex;\n  flex-direction: column;\n  background-color: #ffffff;\n  transition: 0.3s ease;\n\n  @media (min-width: 320px) {\n    width: 100%;\n    padding: 10px;\n  }\n  @media (min-width: 375px) {\n    width: 300px;\n    padding: 20px;\n  }\n  @media (min-width: 768px) {\n    width: 480px;\n    padding: 40px;\n  }\n`;\n\nexport const EmailNameOfInput = styled.span`\n  font-family: 'Inter', sans-serif;\n  font-weight: 600;\n  font-size: 14px;\n\n  color: #111111;\n`;\n\nexport const EmailInput = styled(Field)`\n  height: 54px;\n  border-radius: 8px;\n  border: 1px solid #11111126;\n  padding: 18px;\n  transition: border 0.5s ease;\n  margin-top: 10px;\n\n  &:hover,\n  &:focus {\n    border: 1px solid #111111;\n  }\n  &.main {\n    border: 1px solid #11111126;\n  }\n  &.fail {\n    border: 1px solid ${props => props.theme.colors.inputError};\n  }\n  &.good {\n    border: 1px solid #3cbc81;\n  }\n\n  ::placeholder,\n  ::-webkit-input-placeholder {\n    color: #dce3e5;\n  }\n  :-ms-input-placeholder {\n    color: #dce3e5;\n  }\n\n  @media (min-width: 320px) {\n    width: 100%;\n  }\n  @media (min-width: 375px) {\n    width: 100%;\n  }\n  @media (min-width: 1280px) {\n    width: 400px;\n  }\n`;\n\nexport const ResendSubmit = styled.button`\n  padding: 10px;\n  border-radius: 16px;\n  height: auto;\n  margin-top: 10px;\n  margin-left: auto;\n  margin-right: auto;\n\n  &:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n  }\n`;\n","import { Modal } from 'components/Modal/Modal';\nimport { useDispatch } from 'react-redux';\nimport { toggleModal } from 'redux/modal/modalSlice';\nimport * as yup from 'yup';\nimport {\n  EmailInput,\n  EmailNameOfInput,\n  FormikWrapper,\n  ResendSubmit,\n  ResendVerifyForm,\n} from './ResendMailVerifyModal.styled';\nimport { resendVerifyMail } from 'redux/auth/operations';\n\nconst emailSchema = yup.object().shape({\n  email: yup.string().email('Incorrect email!').required('Email is required'),\n});\n\nconst initialValues = {\n  email: '',\n};\n\nexport const ResendMailVerifyModal = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = async ({ email }) => {\n    const answer = await dispatch(resendVerifyMail(email));\n\n    if (answer.error) {\n      return;\n    }\n\n    dispatch(toggleModal());\n  };\n\n  return (\n    <Modal>\n      <FormikWrapper\n        initialValues={initialValues}\n        validationSchema={emailSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ dirty, isValid }) => (\n          <ResendVerifyForm>\n            <div>\n              <EmailNameOfInput>Email</EmailNameOfInput>\n              <EmailInput\n                type=\"email\"\n                id=\"email\"\n                name=\"email\"\n                placeholder=\"Enter your email\"\n              />\n            </div>\n            {dirty && (\n              <ResendSubmit type=\"submit\" disabled={!isValid}>\n                Submit\n              </ResendSubmit>\n            )}\n          </ResendVerifyForm>\n        )}\n      </FormikWrapper>\n    </Modal>\n  );\n};\n","import VisionIconsLogIn from 'components/VisionIconsLogIn/VisionIconsLogIn';\n\nimport { useTranslation } from 'react-i18next';\nimport { ToasterNotify } from 'components/Notify/Notify';\nimport { ResendMailVerifyBtn } from 'components/ResendMailVerifyBtn/ResendMailVerifyBtn';\nimport { ResendMailVerifyModal } from 'components/ResendMailVerifyModal/ResendMailVerifyModal';\nimport { Toaster } from 'react-hot-toast';\nimport { BiLogIn } from 'react-icons/bi';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectShowModal } from 'redux/modal/selector';\nimport { register } from '../../redux/auth/operations';\n\nimport {\n  ContainerRegisterForm,\n  DivIconToglePassword,\n  LogInBtn,\n  LogInBtnText,\n  RegisterForm,\n  RegisterInput,\n  RegisterNameOfInput,\n  RegisterSubmitBtn,\n  RegisterTitle,\n  Registerlabel,\n} from './Register.styled';\nimport { Footer } from 'components/Footer/Footer';\n\nexport default function Register() {\n  const { t } = useTranslation();\n\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const isShowModalWindow = useSelector(selectShowModal);\n\n  const [type, setType] = useState('password');\n  const [borderColorNameInpt, setBorderColorNameInpt] = useState('main');\n  const [borderColorMailInpt, setBorderColorMailInpt] = useState('main');\n  const [borderColorPassInpt, setBorderColorPassInpt] = useState('main');\n\n  function validationName(inputText) {\n    if (inputText.length >= 16) {\n      setBorderColorNameInpt('fail');\n      ToasterNotify(`${t('notifications.ErrorName')}`);\n      return false;\n    } else {\n      setBorderColorNameInpt('good');\n      return true;\n    }\n  }\n\n  function validateEmail(inputText) {\n    const mailFormat = /\\S+@\\S+\\.\\S+/;\n\n    if (inputText.match(mailFormat)) {\n      setBorderColorMailInpt('good');\n      return true;\n    } else {\n      setBorderColorMailInpt('fail');\n      ToasterNotify(`${t('notifications.ErrorEmail')}`);\n      return false;\n    }\n  }\n\n  function validatePassword(inputText) {\n    const isValidLength = /^.{6,16}$/;\n    if (!isValidLength.test(inputText)) {\n      ToasterNotify(`${t('notifications.ErrorPasswordLong')}`);\n      setBorderColorPassInpt('fail');\n      return false;\n    }\n    const isNonWhiteSpace = /^\\S*$/;\n    if (!isNonWhiteSpace.test(inputText)) {\n      ToasterNotify(`${t('notifications.ErrorPasswordSpace')}`);\n      setBorderColorPassInpt('fail');\n      return false;\n    }\n\n    const isContainsUppercase = /^(?=.*[A-Z]).*$/;\n    if (!isContainsUppercase.test(inputText)) {\n      ToasterNotify(`${t('notifications.ErrorPasswordUppercase')}`);\n      setBorderColorPassInpt('fail');\n      return false;\n    }\n\n    const isContainsLowercase = /^(?=.*[a-z]).*$/;\n    if (!isContainsLowercase.test(inputText)) {\n      ToasterNotify(`${t('notifications.ErrorPasswordLowercase')}`);\n      setBorderColorPassInpt('fail');\n      return false;\n    }\n\n    const isContainsNumber = /^(?=.*[0-9]).*$/;\n    if (!isContainsNumber.test(inputText)) {\n      ToasterNotify(`${t('notifications.ErrorPasswordDigit')}`);\n      setBorderColorPassInpt('fail');\n      return false;\n    } else {\n      setBorderColorPassInpt('good');\n      return true;\n    }\n  }\n\n  function isValidateForm() {\n    if (!validationName(name)) {\n      return false;\n    }\n    if (!validateEmail(email)) {\n      return false;\n    }\n    if (!validatePassword(password)) {\n      return false;\n    }\n    return true;\n  }\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'email':\n        return setEmail(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (isValidateForm()) {\n      setBorderColorNameInpt('good');\n      setBorderColorMailInpt('good');\n      setBorderColorPassInpt('good');\n      dispatch(register({ name, email, password }));\n      setEmail('');\n      setName('');\n      setPassword('');\n    }\n  };\n\n  function togglePassInput() {\n    if (type === 'password') {\n      setType('text');\n    }\n    if (type === 'text') {\n      setType('password');\n    }\n  }\n\n  return (\n<>\n    <ContainerRegisterForm>\n      <RegisterForm onSubmit={handleSubmit} autoComplete=\"off\">\n        <RegisterTitle>{t('loginRegisterForm.SignUp')}</RegisterTitle>\n        <RegisterNameOfInput>{t('loginRegisterForm.Name')}</RegisterNameOfInput>\n        <Registerlabel>\n          <RegisterInput\n            id=\"reg\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            className={` ${borderColorNameInpt}`}\n            placeholder=\"Enter your name\"\n            onChange={handleChange}\n          />\n        </Registerlabel>\n        <RegisterNameOfInput>{t('loginRegisterForm.Email')}</RegisterNameOfInput>\n        <Registerlabel>\n          <RegisterInput\n            id=\"reg\"\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            className={` ${borderColorMailInpt}`}\n            placeholder=\"Enter email\"\n            onChange={handleChange}\n          />\n        </Registerlabel>\n        <RegisterNameOfInput>{t('loginRegisterForm.Password')}</RegisterNameOfInput>\n        <Registerlabel>\n          <RegisterInput\n            id=\"reg\"\n            type={type}\n            name=\"password\"\n            value={password}\n            className={` ${borderColorPassInpt}`}\n            placeholder=\"Enter password\"\n            onChange={handleChange}\n          />\n          <DivIconToglePassword type=\"button\" onClick={togglePassInput}>\n            <VisionIconsLogIn type={type} />\n          </DivIconToglePassword>\n        </Registerlabel>\n\n        <RegisterSubmitBtn type=\"submit\">\n          {t('btn.SignUp')}\n          <BiLogIn size={20} />\n        </RegisterSubmitBtn>\n        <Toaster />\n      </RegisterForm>\n\n      <LogInBtn to={'/login'} type=\"button\">\n        <LogInBtnText>{t('btn.LogIn')}</LogInBtnText>\n      </LogInBtn>\n\n      <ResendMailVerifyBtn />\n\n      {isShowModalWindow && <ResendMailVerifyModal />}\n    </ContainerRegisterForm>\n  <Footer />\n    </>\n  );\n}\n"],"names":["ResendBtn","styled","props","theme","colors","buttonsHoverColor","ResendMailVerifyBtn","useState","isHovered","setIsHovered","dispatch","useDispatch","onMouseEnter","onMouseLeave","onClick","toggleModal","type","FormikWrapper","Formik","ResendVerifyForm","Form","EmailNameOfInput","EmailInput","Field","inputError","ResendSubmit","emailSchema","yup","shape","email","required","initialValues","ResendMailVerifyModal","handleSubmit","resendVerifyMail","error","Modal","validationSchema","onSubmit","dirty","isValid","id","name","placeholder","disabled","Register","t","useTranslation","setName","setEmail","password","setPassword","isShowModalWindow","useSelector","selectShowModal","setType","borderColorNameInpt","setBorderColorNameInpt","borderColorMailInpt","setBorderColorMailInpt","borderColorPassInpt","setBorderColorPassInpt","isValidateForm","length","ToasterNotify","inputText","match","validateEmail","test","validatePassword","handleChange","target","value","e","preventDefault","register","autoComplete","className","onChange","VisionIconsLogIn","size","to","Footer"],"sourceRoot":""}