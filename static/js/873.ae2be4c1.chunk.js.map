{"version":3,"file":"static/js/873.ae2be4c1.chunk.js","mappings":"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","sources":["pages/StatisticsPage/StatisticsPage.styled.js","components/StatisticsChart/StatisticsChart.styled.jsx","components/StatisticsChart/StatisticsChart.js","components/StatisticsChart/StatisticsInfo/StatisticsInfo.styled.js","components/StatisticsChart/StatisticsInfo/StatisticsInfo.js","pages/StatisticsPage/StatisticsPage.js"],"sourcesContent":["import styled from 'styled-components';\n\n// 1280-1440 десктоп\n// 768-1279 таблетка\n// 375-767 мобилка\n// До 375 тянутся\n\nexport const GeneralContainer = styled.div`\n  padding: 28px 14px 135px;\n  background-color: ${props => props.theme.colors.bgColorStatistic};\n  border-radius: 16px;\n\n  @media screen and (min-width: 768px) {\n    padding: 132px 32px 224px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    padding: 134px 113px 104px;\n  }\n`;\n\nexport const BoxPagination = styled.div`\n  max-width: 307px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin: 0 auto 40px;\n\n  @media screen and (min-width: 768px) {\n    max-width: 100%;\n    width: 576px;\n\n    align-items: center;\n    flex-direction: row;\n    justify-content: space-between;\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: 780px;\n  }\n`;\n\nexport const Container = styled.div`\n  max-width: 307px;\n  height: 440px;\n\n  text-align: center;\n  padding: 40px 14px;\n  border: 0.8px solid ${props => props.theme.colors.colorLineStatisticChart};\n\n;\n  border-radius: 29px;\n  margin: 0 auto;\n\n  @media screen and (min-width: 768px) {\n    max-width: 100%;\n    width: 640px;\n    padding: 32px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: 860px;\n  }\n`;\n\nexport const Text = styled.p`\n  color: ${props => props.theme.colors.textColorStatistic};\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 1,5;\n  text-align: left;\n\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  position: relative;\n  max-width: 279px;\n  margin-top: 20px;\n  color: ${props => props.theme.colors.textColorStatistic};\n\n  @media screen and (min-width: 768px) {\n    max-width: 100%;\n    width: 576px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: 780px;\n  }\n`;\n\nexport const ListChart = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 28px;\n  width: 100%;\n`;\n\nexport const ListItemChart = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  width: 100%;\n\n  text-align: right;\n  font-family: Inter;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.5;\n\n  ::after {\n    content: '';\n    display: block;\n    width: 239px;\n    height: 1px;\n    background-color: ${props => props.theme.colors.colorLineStatisticChart};\n    margin-left: 14px;\n\n    @media screen and (min-width: 768px) {\n      width: 518px;\n      margin-left: 32px;\n    }\n\n    @media screen and (min-width: 1440px) {\n      width: 692px;\n      margin-left: 64px;\n    }\n  }\n`;\nexport const Column = styled.p`\n  width: 14px;\n  height: ${props => `calc(${props.data}% - 10.5px)`};\n  background: ${props =>\n    props.type === 'day'\n      ? 'linear-gradient(360deg, #FFD2DD 0%, rgba(255, 210, 221, 0.00) 96.88%)'\n      : 'linear-gradient(360deg, #3E85F3 0%, rgba(62, 133, 243, 0.00) 100%)'};\n  margin-top: auto;\n  border-bottom-left-radius: 8px;\n  border-bottom-right-radius: 8px;\n  transition: height 0.3s ease-in-out;\n  \n  @media screen and (min-width: 300px) {\n    width: 18px;\n  }\n\n  @media screen and (min-width: 320px) {\n    width: 22px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 27px;\n  }\n`;\n\nexport const ProcentColumn = styled.span`\n  position: relative;\n  width: 25px;\n  bottom: 18px;\n  left: -1.5px;\n  font-family: Inter;\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 1.3;\n  text-align: center;\n\n  @media screen and (min-width: 768px) {\n    width: 33px;\n    bottom: 24px;\n    left: -3px;\n    font-size: 16px;\n    line-height: 1.5;\n  }\n`;\n\nexport const ListColumn = styled.ul`\n  position: absolute;\n  bottom: 10px;\n  left: 0;\n  max-width: 215px;\n  gap: 12%;\n  height: 100%;\n  margin: 0 14px 0 50px;\n  display: flex;\n  justify-content: space-between;\n\n  @media screen and (min-width: 375px) {\n    width: 215px;\n    gap: 0px;\n    max-width: 100%;\n  }\n\n  @media screen and (min-width: 768px) {\n\n    width: 464px;\n    margin: 0 20px 0 95px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: 534px;\n    margin: 0 100px 0 146px;\n  }\n`;\n\nexport const ListItemColumn = styled.li`\n  display: flex;\n  gap: 4px;\n  position: relative;\n\n  @media screen and (min-width: 340px) {\n    gap: 6px;\n  }\n\n  @media screen and (min-width: 375px) {\n    gap: 8px;\n  }\n\n  @media screen and (min-width: 768px) {\n    gap: 14px;\n  }\n`;\nexport const TextCategory = styled.p`\n  position: absolute;\n  bottom: -36px;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  width: max-content;\n  font-family: Inter;\n  font-size: 10px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.3;\n\n  @media screen and (min-width: 320px) {\n    font-size: 12px;\n  }\n\n  @media screen and (min-width: 768px) {\n    bottom: -35px;\n\n    font-size: 14px;\n    line-height: 1.5;\n  }\n`;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Container, ListChart, ListItemChart, Column, ListColumn, ListItemColumn, ProcentColumn, TextCategory } from './StatisticsChart.styled';\n\n\nconst StatisticsChart = ({ date, tasks }) => {\n  const { t } = useTranslation();\n  const chart = [0, 20, 40, 60, 80, 100];\n  const [tasksStatistic, setTasksStatistic] = useState([]);\n\n  const getProcentTaskStatistic = useCallback(arr => {\n    const checkTasksPercent = percent => (isFinite(percent) ? percent : 0);\n\n    let toDo = 0;\n    let inProgress = 0;\n    let done = 0;\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i].category === 'to-do') {\n        toDo++;\n      } else if (arr[i].category === 'in-progress') {\n        inProgress++;\n      } else {\n        done++;\n      }\n    }\n\n    const todoProc = checkTasksPercent(Math.round((toDo * 100) / arr.length));\n    const inProgressProc = checkTasksPercent(\n      Math.round((inProgress * 100) / arr.length)\n    );\n    const doneProc = checkTasksPercent(Math.round((done * 100) / arr.length));\n\n    return [todoProc, inProgressProc, doneProc];\n  }, []);\n\n  useEffect(() => {\n    const data = [\n      {\n        name: `${t('statistics.ToDo')}`,\n        day: 0,\n        month: 0,\n      },\n      {\n        name: `${t('statistics.InProgress')}`,\n        day: 0,\n        month: 0,\n      },\n      {\n        name: `${t('statistics.Done')}`,\n        day: 0,\n        month: 0,\n      },\n    ];\n    const filteredDatesByMonth = tasks.filter(\n      task => new Date(task.date).getMonth() === date.getMonth()\n    );\n\n    const filteredDatesByDay = tasks.filter(\n      task => new Date(task.date).getDate() === date.getDate()\n    );\n\n    const statisticMonth = getProcentTaskStatistic(filteredDatesByMonth);\n    const statisticDay = getProcentTaskStatistic(filteredDatesByDay);\n\n    data[0].month = statisticMonth[0];\n    data[1].month = statisticMonth[1];\n    data[2].month = statisticMonth[2];\n\n    data[0].day = statisticDay[0];\n    data[1].day = statisticDay[1];\n    data[2].day = statisticDay[2];\n\n    setTasksStatistic(data);\n  }, [date, getProcentTaskStatistic, tasks, t]);\n\n\n\n  return (\n<Container>\n<ListChart>\n  {chart.reverse().map((item) => (<ListItemChart key={item}>{item}</ListItemChart>))}\n</ListChart>\n<ListColumn>\n  {tasksStatistic.map(item => (\n    <ListItemColumn key={item.name}>\n      <Column data={item.day} type='day'>\n      <ProcentColumn>\n      {item.day}%\n      </ProcentColumn>\n      </Column>\n      <Column data={item.month} type='month'>\n        <ProcentColumn>\n          {item.month}%\n        </ProcentColumn>\n      </Column>\n      <TextCategory>\n        {item.name}\n      </TextCategory>\n    </ListItemColumn>\n  ))}\n</ListColumn>\n</Container>\n  );\n};\n\nexport default StatisticsChart;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  gap: 14px;\n`;\n\nexport const ListItem = styled.li`\n  position: relative;\ndisplay: flex;\ngap: 8px;\nalign-items: center;\n\n  &::before {\n    content: '';\n    display: inline-block;\n    border-radius: 8px;\n    width: 8px;\n    height: 8px;\n  }\n\n  &:first-child::before {\n    background-color: #ffd2dd;\n  }\n\n  &:last-child::before {\n    background-color: #3e85f3;\n  }\n`;\n\nexport const Text = styled.p`\n    color: ${props => props.theme.colors.textColorStatistic};\n\n  font-size: 16px;\n  font-family: Inter;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.2;\n`;\n","import { List, ListItem, Text } from './StatisticsInfo.styled';\nimport { useTranslation } from 'react-i18next';\n\n\nexport const StatisticsInfo = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div>\n      <List>\n        <ListItem>\n          <Text>{t('statistics.ByDay')}</Text>\n        </ListItem>\n        <ListItem>\n          <Text>{t('statistics.ByMonth')}</Text>\n        </ListItem>\n      </List>\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Container,\n  Text,\n  BoxPagination,\n  GeneralContainer,\n} from './StatisticsPage.styled';\nimport { PeriodPaginator } from 'components/CalendarToolbar/PeriodPaginator/PeriodPaginator';\nimport StatisticsChart from '../../components/StatisticsChart/StatisticsChart';\nimport { selectAllTasks } from 'redux/task/selectors';\nimport { useFeatchTasksByMonth } from 'hooks/useFeatchTasksByMonth';\nimport { useDate } from 'hooks/useDate';\nimport { StatisticsInfo } from 'components/StatisticsChart/StatisticsInfo/StatisticsInfo';\n\nconst StatisticsPage = () => {\n  const { t } = useTranslation();\n  const [date, setNewDate] = useDate();\n  useFeatchTasksByMonth();\n  const tasks = useSelector(selectAllTasks);\n\n  return (\n    <GeneralContainer>\n      <BoxPagination>\n        <PeriodPaginator\n          minDate={'Jun 23 2023'}\n          date={date}\n          setDate={setNewDate}\n          typenav={'day'}\n        />\n        <StatisticsInfo />\n      </BoxPagination>\n      <Container>\n        <Text>{t('statistics.Tasks')}</Text>\n        <StatisticsChart date={date} tasks={tasks} />\n      </Container>\n\n    </GeneralContainer>\n  );\n};\n\nexport default StatisticsPage;\n"],"names":["GeneralContainer","styled","props","theme","colors","bgColorStatistic","BoxPagination","Container","colorLineStatisticChart","Text","textColorStatistic","ListChart","ListItemChart","Column","data","type","ProcentColumn","ListColumn","ListItemColumn","TextCategory","date","tasks","t","useTranslation","useState","tasksStatistic","setTasksStatistic","getProcentTaskStatistic","useCallback","arr","checkTasksPercent","percent","isFinite","toDo","inProgress","done","i","length","category","Math","round","useEffect","name","day","month","filteredDatesByMonth","filter","task","Date","getMonth","filteredDatesByDay","getDate","statisticMonth","statisticDay","reverse","map","item","List","ListItem","StatisticsInfo","useDate","setNewDate","useFeatchTasksByMonth","useSelector","selectAllTasks","PeriodPaginator","minDate","setDate","typenav"],"sourceRoot":""}