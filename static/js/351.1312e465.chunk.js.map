{"version":3,"file":"static/js/351.1312e465.chunk.js","mappings":"yPAEaA,EAAUC,EAAAA,GAAAA,IAAH,8PCAPC,EAAYD,EAAAA,GAAAA,IAAH,qM,mBCCTE,EAAaF,EAAAA,GAAAA,IAAH,0CAIjBG,GAASH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,qfAQU,SAAAK,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,gBAAvB,IAUH,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,OAAOE,sBAAvB,IAChB,SAAAJ,GAAK,OAAIA,EAAMC,MAAMC,OAAOG,sBAAvB,IAIM,SAAAL,GAAK,OAAIA,EAAMC,MAAMC,OAAOE,sBAAvB,IAChB,SAAAJ,GAAK,OAAIA,EAAMC,MAAMC,OAAOG,sBAAvB,IAILC,GAAcX,EAAAA,EAAAA,IAAOG,EAAPH,CAAH,mJAII,SAAAK,GAAK,OAAIA,EAAMC,MAAMC,OAAOK,mBAAvB,IAGpBC,GAAYb,EAAAA,EAAAA,IAAOG,EAAPH,CAAH,6F,SCvCTc,EAAmB,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACxBC,GAAgBC,EAAAA,EAAAA,MAAhBD,YAEFE,EAASF,GAA4BD,EAAKI,UAEhD,OACE,UAACjB,EAAD,YACE,SAACS,EAAD,CAAaS,GAAE,gBAAWF,GAA1B,SAAoC,WAGpC,SAACL,EAAD,CAAWO,GAAE,cAASF,GAAtB,SAAgC,UAKrC,E,oBCXYG,EAAkB,WAC7B,OAA2BC,EAAAA,EAAAA,KAA3B,eAAOP,EAAP,KAAaQ,EAAb,KAIA,OAFAC,EAAAA,EAAAA,MAGE,UAACvB,EAAD,YACE,SAACwB,EAAA,EAAD,CACEC,QAAS,cACTX,KAAMA,EACNY,QAASJ,KAEX,SAACT,EAAD,CAAkBC,KAAMA,MAG7B,E,8BCmBD,EA3BqB,WACnB,IAAMa,GAAWC,EAAAA,EAAAA,MACjB,GAAeP,EAAAA,EAAAA,KAARP,GAAP,eACMe,GAAOC,EAAAA,EAAAA,IAAYC,EAAAA,IAazB,OAXAC,EAAAA,EAAAA,YAAU,WACR,GAAoB,IAAhBH,EAAKI,OAAc,CACrB,IAAMC,EAAU,CACdC,OAAOC,EAAAA,EAAAA,SAAOtB,EAAM,KACpBuB,MAAMD,EAAAA,EAAAA,SAAOtB,EAAM,SAErBa,GAASW,EAAAA,EAAAA,IAAcJ,GACxB,CAEF,GAAE,KAGD,UAACpC,EAAD,YACE,SAACsB,EAAD,KACA,SAAC,EAAAmB,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,CAAQC,MAAO,KAAnC,UACE,SAAC,KAAD,OAEF,SAAC,KAAD,MAGL,C","sources":["pages/CalendarPage/CalendarPage.styled.jsx","components/CalendarToolbar/CalendarToolbar.styled.jsx","components/CalendarToolbar/PeriodTypeSelect/PeriodTypeSelect.styled.jsx","components/CalendarToolbar/PeriodTypeSelect/PeriodTypeSelect.js","components/CalendarToolbar/CalendarToolbar.js","pages/CalendarPage/CalendarPage.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Section = styled.div`\n  /* max-width: 375px; */\n  margin-left: auto;\n  margin-right: auto;\n\n  @media screen and (min-width: 768px) {\n    /* max-width: 704px; */\n  }\n\n  @media screen and (min-width: 1280px) {\n    /* max-width: 1087px; */\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 18px;\n  \n  @media screen and (min-width: 768px) {\n    justify-content: space-between;\n    flex-direction: row;\n  }\n`;\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const NavWrraper = styled.div`\n  display: flex;\n`;\n\nconst Button = styled(NavLink)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 76px;\n  height: 34px;\n  font-size: 14px;\n  color: #3e85f3;\n  background-color: ${props => props.theme.colors.btnMonthDayColor};\n  transition: background-color 0.5s ease, color 0.5s ease;\n  \n  @media screen and (min-width: 768px) {\n    width: 82px;\n    height: 34px;\n    font-size: 16px;\n  }\n  :hover,\n  :focus {\n    background-color: ${props => props.theme.colors.btnMonthDayColorActive};\n    color: ${props => props.theme.colors.sideBarTextActiveColor};\n  }\n\n  &.active {\n    background-color: ${props => props.theme.colors.btnMonthDayColorActive};\n    color: ${props => props.theme.colors.sideBarTextActiveColor};\n  }\n`;\n\nexport const ButtonMonth = styled(Button)`\n  border-radius: none;\n  border-top-left-radius: 8px;\n  border-bottom-left-radius: 8px;\n  border-right: 1px solid ${props => props.theme.colors.calendarMonthBorder};\n`;\n\nexport const ButtonDay = styled(Button)`\n  border-top-right-radius: 8px;\n  border-bottom-right-radius: 8px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { NavWrraper, ButtonDay, ButtonMonth } from './PeriodTypeSelect.styled';\n\nexport const PeriodTypeSelect = ({date}) => {\n  const { currentDate } = useParams()\n\n  const params = currentDate ? currentDate : date.getDate();\n\n  return (\n    <NavWrraper>\n      <ButtonMonth to={`month/${params}`}>\n        Month\n      </ButtonMonth>\n      <ButtonDay to={`day/${params}`}>\n        Day\n      </ButtonDay>\n    </NavWrraper>\n  );\n};\n","import { Container } from './CalendarToolbar.styled';\nimport { PeriodPaginator } from './PeriodPaginator/PeriodPaginator';\nimport { PeriodTypeSelect } from './PeriodTypeSelect/PeriodTypeSelect';\n\nimport { useDate } from 'hooks/useDate';\nimport { useFeatchTasksByMonth } from 'hooks/useFeatchTasksByMonth';\n\nexport const CalendarToolbar = () => {\n  const [date, setNewDate] = useDate()\n\n  useFeatchTasksByMonth()\n\n  return (\n    <Container>\n      <PeriodPaginator\n        minDate={'Jun 23 2023'}\n        date={date}\n        setDate={setNewDate}\n      />\n      <PeriodTypeSelect date={date} />\n    </Container>\n  );\n};\n","import { Suspense, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Outlet } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport { Toaster } from 'react-hot-toast';\n\nimport { Section } from './CalendarPage.styled';\nimport { CalendarToolbar } from 'components/CalendarToolbar/CalendarToolbar';\nimport { Loader } from 'components/Loader/Loader';\nimport { fetchAllTasks } from 'redux/task/operations';\n\nimport { selectAllTasks } from 'redux/task/selectors';\nimport { useDate } from 'hooks/useDate';\n\nconst CalendarPage = () => {\n  const dispatch = useDispatch();\n  const [date] = useDate()\n  const task = useSelector(selectAllTasks);\n\n  useEffect(() => {\n    if (task.length === 0) {\n      const dateObj = {\n        month: format(date, 'L'),\n        year: format(date, 'yyyy'),\n      };\n      dispatch(fetchAllTasks(dateObj));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Section>\n      <CalendarToolbar />\n      <Suspense fallback={<Loader width={96} />}>\n        <Outlet />\n      </Suspense>\n      <Toaster/>\n    </Section>\n  );\n};\n\nexport default CalendarPage;\n"],"names":["Section","styled","Container","NavWrraper","Button","NavLink","props","theme","colors","btnMonthDayColor","btnMonthDayColorActive","sideBarTextActiveColor","ButtonMonth","calendarMonthBorder","ButtonDay","PeriodTypeSelect","date","currentDate","useParams","params","getDate","to","CalendarToolbar","useDate","setNewDate","useFeatchTasksByMonth","PeriodPaginator","minDate","setDate","dispatch","useDispatch","task","useSelector","selectAllTasks","useEffect","length","dateObj","month","format","year","fetchAllTasks","Suspense","fallback","Loader","width"],"sourceRoot":""}