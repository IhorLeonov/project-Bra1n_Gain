{"version":3,"file":"static/js/808.a8de4194.chunk.js","mappings":"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","sources":["components/UserForm/UserForm.styled.jsx","components/VisionIconsLogIn/VisionIconsLogIn.js","components/UserForm/UserForm.jsx","components/ChangePassord/ChangePassord.styled.jsx","components/ChangePassord/ChangePassord.js","pages/Account/AccountPage.styled.jsx","pages/Account/AccountPage.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field } from 'formik';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nimport { BiErrorCircle, BiCheckCircle, BiChevronDown } from 'react-icons/bi';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  min-height: 100vh;\n\n  background: ${props => props.theme.colors.componentsBgColor};\n  border-radius: 0 16px 16px 16px;\n  padding: 40px 18px;\n\n  @media screen and (min-width: 1280px) {\n    padding-top: 60px;\n  }\n`;\n\nexport const FormUserProfile = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  @media screen and (min-width: 375px) {\n    width: 299px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 354px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 758px;\n  }\n`;\n\nexport const BtnUploadAvatar = styled(Field)`\n  opacity: 1;\n  position: absolute;\n  bottom: -6%;\n  right: 20%;\n  overflow: hidden;\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n  font-size: 15px;\n\n  ::before {\n    content: ' +';\n    color: rgba(255, 255, 255, 1);\n    cursor: pointer;\n    padding: 5px;\n    background: ${props => props.theme.colors.buttonsColor};\n    position: absolute;\n    // transition: background анимация;\n    top: -8px;\n    left: -45%;\n    width: 40px;\n    height: 40px;\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: 24px;\n    width: 24px;\n    height: 24px;\n    bottom: -5%;\n    right: 20%;\n\n    ::before {\n      top: -9px;\n      left: -28%;\n      width: 40px;\n      height: 40px;\n    }\n  }\n`;\n\nexport const Avatar = styled.img`\n  border-radius: inherit;\n  width: 68px;\n  height: 68px;\n  object-fit: cover;\n\n  @media screen and (min-width: 768px) {\n    top: 0;\n    left: -60px;\n    width: 120px;\n    height: 120px;\n  }\n`;\n\nexport const LabelAvatar = styled.label`\n  position: relative;\n  margin: 0 auto;\n  text-align: center;\n`;\n\nexport const AvatarWrapper = styled.div`\n  position: absolute;\n  top: -71px;\n  right: -36px;\n  width: 72px;\n  height: 72px;\n  border: 2px solid ${props => props.theme.colors.buttonsColor};\n  border-radius: 50%;\n\n  @media screen and (min-width: 768px) {\n    top: 0;\n    left: -60px;\n    width: 124px;\n    height: 124px;\n  }\n`;\n\nexport const FieldWrapper = styled.div`\n  position: relative;\n`;\n\nexport const ErrorMassege = styled.div`\n  position: absolute;\n  bottom: 3px;\n  left: 15px;\n  font-size: 10px;\n  line-height: 1.16;\n  @media screen and (min-width: 768px) {\n    font-size: 12px;\n    bottom: 0;\n  }\n`;\n\nexport const ErrorCircleIcon = styled(BiErrorCircle)`\n  position: absolute;\n  opacity: 0;\n  top: 30px;\n  right: 18px;\n  &.error {\n    opacity: 1;\n  }\n\n  @media screen and (min-width: 768px) {\n    top: 33px;\n  }\n`;\n\nexport const CheckCircleIcon = styled(BiCheckCircle)`\n  position: absolute;\n  opacity: 0;\n  top: 30px;\n  right: 18px;\n  &.success {\n    opacity: 1;\n  }\n\n  @media screen and (min-width: 768px) {\n    top: 33px;\n  }\n`;\n\nexport const BiChevronDownIcon = styled(BiChevronDown)`\n  position: absolute;\n  top: 30px;\n  right: 18px;\n  pointer-events: none;\n  color: ${props => props.theme.colors.textColor};\n\n  @media screen and (min-width: 768px) {\n    top: 33px;\n  }\n`;\n\nexport const UserName = styled.p`\n  margin: 0 auto;\n  margin-top: 18px;\n  color: ${props => props.theme.colors.textColor};\n\n  font-size: 14px;\n  font-weight: 700;\n\n  @media screen and (min-width: 768px) {\n    margin-top: 144px;\n    font-size: 18px;\n    margin-bottom: 8px;\n  }\n`;\n\nexport const UserLabel = styled.span`\n  margin-top: 4px;\n  margin-bottom: 40px;\n  text-align: center;\n  font-size: 12px;\n  font-weight: 600;\n  line-height: 1.17;\n  color: ${props => props.theme.colors.accountLabelColor};\n\n  @media screen and (min-width: 768px) {\n    margin-top: 8px;\n    font-size: 14px;\n    line-height: 1.3;\n  }\n`;\n\nexport const Input = styled(Field)`\n  width: 100%;\n  height: 40px;\n  border-radius: 8px;\n  border: 1px solid ${props => props.theme.colors.inputNormal};\n  outline: none;\n  margin-top: 8px;\n  margin-bottom: 18px;\n  padding: 12px 14px;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 1.3;\n  background: ${props => props.theme.colors.componentsBgColor};\n  color: ${props => props.theme.colors.textColor};\n  transition: border-color 0.5s ease;\n\n  :hover,\n  :focus {\n    border-color: ${props => props.theme.colors.inputHover};\n  }\n\n  &.error {\n    border-color: ${props => props.theme.colors.inputError};\n  }\n\n  &.success {\n    border-color: ${props => props.theme.colors.inputCorrect};\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n    line-height: 1.13;\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 354px;\n  }\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 1.17;\n  color: ${props => props.theme.colors.accountLabelColor};\n\n  &.error {\n    color: ${props => props.theme.colors.inputError};\n  }\n\n  &.success {\n    color: ${props => props.theme.colors.inputCorrect};\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: 14px;\n    line-height: 1.3;\n  }\n`;\n\nexport const MainFieldWrapper = styled.div`\n  @media screen and (min-width: 1280px) {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 50px;\n    margin-bottom: 48px;\n  }\n`;\nexport const BlockFieldWrapper = styled.div`\n  @media screen and (min-width: 1280px) {\n    display: flex;\n    flex-direction: column;\n  }\n`;\n\nexport const SubmitBtn = styled.button`\n  margin: 0 auto;\n  margin-top: 22px;\n  width: 195px;\n  height: 46px;\n  border-radius: 16px;\n  border: none;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 1.3;\n  background: ${props => props.theme.colors.buttonsColor};\n  color: ${props => props.theme.colors.Primary};\n  cursor: pointer;\n  transition: background-color 0.5s ease, transform 0.5s ease;\n  @media screen and (min-width: 768px) {\n    width: 262px;\n  }\n\n  :disabled {\n    cursor: not-allowed;\n  }\n\n  :hover,\n  :focus {\n    background-color: rgba(43, 120, 239, 1);\n    transform: scale(1.2);\n  }\n\n  :disabled {\n    opacity: 0.4;\n  }\n`;\n\nexport const DatePickerStyles = styled(DatePicker)`\n  width: 100%;\n  height: 40px;\n  background: ${props => props.theme.colors.componentsBgColor};\n  color: ${props => props.theme.colors.textColor};\n  border-radius: 8px;\n  border: 1px solid ${props => props.theme.colors.inputNormal};\n  outline: none;\n  margin-top: 8px;\n  margin-bottom: 18px;\n  padding: 12px 14px;\n  font-family: Inter-600, sans-serif;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 1.3;\n  cursor: pointer;\n  transition: border-color 0.5s ease;\n  &.success {\n    border-color: ${props => props.theme.colors.inputCorrect};\n  }\n\n  :hover,\n  :focus {\n    border-color: ${props => props.theme.colors.inputHover};\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n    line-height: 1.3;\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 354px;\n  }\n`;\n\nexport const DatePickerWrapper = styled.div`\n  position: relative;\n  .react-datepicker {\n    background-color: ${props => props.theme.colors.primaryBlueColor};\n    border-radius: 16px;\n    overflow: hidden;\n    border: none;\n    color: ${props => props.theme.colors.currentdayBgColor};\n    width: 235px;\n    height: 330px;\n    display: flex;\n    justify-content: center;\n    font-size: 14px;\n    font-weight: 400;\n    line-height: 1.3;\n\n    @media screen and (min-width: 768px) {\n      width: 327px;\n      height: 345px;\n    }\n  }\n  .react-datepicker__header {\n    position: relative;\n    background-color: ${props => props.theme.colors.primaryBlueColor};\n    border-bottom: 1px solid ${props => props.theme.colors.primaryBlueColor};\n  }\n\n  .react-datepicker__navigation-icon {\n    ::before {\n      border-color: rgba(255, 255, 255, 1);\n    }\n\n    .react-datepicker__navigation--next {\n      right: 9px;\n      top: 35px;\n    }\n  }\n\n  .react-datepicker__month-select,\n  .react-datepicker__year-select {\n    padding: 5px;\n    width: 90px;\n    color: rgba(255, 255, 255, 1);\n    background: ${props => props.theme.colors.primaryBlueColor};\n    box-shadow: 0 2px 4px ${props => props.theme.colors.buttonsHoverColor};\n    border-color: ${props => props.theme.colors.buttonsHoverColor};\n\n    text-align: center;\n    font-size: 12px;\n    font-family: var(--title-font);\n    overflow-y: auto;\n    cursor: pointer;\n\n    @media screen and (min-width: 375px) {\n      width: 110px;\n    }\n\n    @media screen and (min-width: 1280px) {\n      width: 120px;\n      font-size: 16px;\n    }\n\n    &:focus {\n      outline: none;\n    }\n\n    ::-webkit-scrollbar {\n      box-sizing: border-box;\n      width: 5px;\n    }\n\n    /* Track */\n    ::-webkit-scrollbar-track {\n      background: rgba(255, 255, 255, 1);\n      border-radius: 10px;\n      margin-top: 15px;\n      margin-bottom: 15px;\n    }\n\n    /* Handle */\n    ::-webkit-scrollbar-thumb {\n      border-radius: 10px;\n    }\n\n    /* Handle on hover */\n    ::-webkit-scrollbar-thumb:hover {\n    }\n  }\n\n  .react-datepicker__current-month {\n    margin-top: 15px;\n    margin-bottom: 11px;\n    font-size: 20px;\n    font-weight: 600;\n    line-height: 1.2;\n\n    color: rgba(255, 255, 255, 1);\n  }\n\n  .react-datepicker__day-name {\n    width: 32px;\n    height: 34px;\n    margin: 0;\n    padding: 9px;\n    color: rgba(255, 255, 255, 1);\n\n    @media screen and (min-width: 768px) {\n      width: 46px;\n      height: 42px;\n    }\n  }\n\n  .react-datepicker__day {\n    width: 32px;\n    height: 34px;\n    margin: 0;\n    padding: 9px;\n    padding-top: 4px;\n    color: rgba(255, 255, 255, 1);\n    transition: background-color 0.5s ease, color 0.5s ease,\n      border-radius 0.5s ease, opacity 0.5s ease;\n    @media screen and (min-width: 768px) {\n      width: 45px;\n      height: 42px;\n      padding: 7px;\n    }\n\n    :hover,\n    :focus {\n      background-color: ${props => props.theme.colors.accentColor};\n      color: ${props => props.theme.colors.textColor};\n      border-radius: 24px;\n      opacity: 0.7;\n    }\n  }\n\n  .react-datepicker__day--weekend {\n    opacity: 40%;\n  }\n\n  .react-datepicker__day--today,\n  .react-datepicker__day--selected {\n    background-color: rgba(255, 255, 255, 1);\n    // background-color:  ${props => props.theme.colors.inputNormal};\n    color: ${props => props.theme.colors.primaryBlueColor};\n    border-radius: 50%;\n    opacity: 1;\n  }\n\n  .react-datepicker__day--keyboard-selected {\n    border-radius: 50%;\n  }\n\n  .react-datepicker__month {\n    margin: 0;\n  }\n\n  .react-datepicker__navigation--previous {\n    left: 7px;\n    top: 30px;\n  }\n\n  .react-datepicker__navigation--next {\n    right: 7px;\n    top: 30px;\n  }\n\n  .react-datepicker__day-names {\n    border-bottom: 1px solid rgba(255, 255, 255, 0.2);\n  }\n`;\n","export default function VisionIconsLogIn({ type }) {\n  return (\n    <>\n      {type === 'password' ? (\n        <svg width={30} height={30}>\n          <use\n            xlinkHref={\n              process.env.PUBLIC_URL + '/images/sprite.svg#icon-show-password'\n            }\n            fill=\"#3E85F3\"\n          />\n        </svg>\n      ) : (\n        <svg width={30} height={30}>\n          <use\n            xlinkHref={\n              process.env.PUBLIC_URL + '/images/sprite.svg#icon-close-password'\n            }\n            fill=\"#3E85F3\"\n          />\n        </svg>\n      )}\n    </>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { updateUser } from 'redux/auth/operations';\nimport { selectUser, selectLanguage } from 'redux/auth/selectors.js';\n\nimport toast from 'react-hot-toast';\nimport { Toaster } from 'react-hot-toast';\n\nimport * as yup from 'yup';\nimport { Formik } from 'formik';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { registerLocale } from 'react-datepicker';\nimport uk from 'date-fns/locale/uk';\n\nimport {\n  Wrapper,\n  Avatar,\n  AvatarWrapper,\n  FormUserProfile,\n  BtnUploadAvatar,\n  LabelAvatar,\n  Input,\n  Label,\n  SubmitBtn,\n  UserLabel,\n  UserName,\n  DatePickerStyles,\n  DatePickerWrapper,\n  MainFieldWrapper,\n  BlockFieldWrapper,\n  FieldWrapper,\n  ErrorMassege,\n  ErrorCircleIcon,\n  CheckCircleIcon,\n  BiChevronDownIcon,\n} from './UserForm.styled';\n\nexport const UserForm = () => {\n  registerLocale('uk', uk);\n\n  const { t } = useTranslation();\n\n  const user = useSelector(selectUser);\n  const languageValue = useSelector(selectLanguage);\n\n  const dispatch = useDispatch();\n\n  const [avatarUrl, setAvatarUrl] = useState('');\n  const [newBirthday, setNewBirthday] = useState('');\n  const [newAvatar, setNewAvatar] = useState('');\n  const [startDate, setStartDate] = useState(new Date());\n  const [isUpdateForm, setIsUpdateForm] = useState(false);\n\n  // Вытягивает дату из бека в формате дд/ммм/гггг и преобразовывает сразу в формат для календаря\n\n  useEffect(() => {\n    if (!user?.birthday) {\n      return;\n    }\n    const newDate = user?.birthday.split('/').reverse().join('-');\n\n    if (user?.birthday !== '') {\n      setStartDate(new Date(Date.parse(newDate)));\n    }\n  }, [user?.birthday]);\n\n  // Функция для отображения превью аватарки перед отправкой формы\n\n  function previewFiles(avatar) {\n    const reader = new FileReader();\n    reader.readAsDataURL(avatar);\n    reader.onloadend = () => {\n      setNewAvatar(reader.result);\n    };\n  }\n\n  // Делает активной кнопку submit при изменении аватарки или даты рождения\n  useEffect(() => {\n    if (newAvatar) {\n      setIsUpdateForm(true);\n    }\n    if (newBirthday && user?.birthday !== newBirthday) {\n      setIsUpdateForm(true);\n    }\n    if (user?.birthday === newBirthday && !newAvatar) {\n      setIsUpdateForm(false);\n    }\n  }, [newAvatar, newBirthday, user?.birthday]);\n\n  // Создает FormData, наполняет ее полями формы, которые редактировались и отправляет на бэк\n\n  const handleFormSubmit = async (values, { resetForm }) => {\n    const formData = new FormData();\n    try {\n      if (avatarUrl) {\n        formData.append('avatarUrl', avatarUrl);\n      }\n      if (initialValues.name !== values.name && values.name) {\n        formData.append('name', values.name);\n      }\n      if (initialValues.email !== values.email && values.email) {\n        formData.append('email', values.email);\n      }\n      if (initialValues.phone !== values.phone) {\n        formData.append('phone', values.phone);\n      }\n      if (initialValues.skype !== values.skype) {\n        formData.append('skype', values.skype);\n      }\n      formData.append(\n        'birthday',\n        new Date(startDate).toLocaleDateString('en-GB')\n      );\n\n      const res = await dispatch(updateUser(formData));\n\n      setIsUpdateForm(false);\n      if (res.meta.requestStatus === 'fulfilled') {\n        toast.success(`${t('notifications.Successfully')}`);\n      } else {\n        toast.error(`${t('notifications.Oops')}`);\n      }\n      resetForm();\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  //схема вадилации\n\n  const schema = yup.object().shape({\n    name: yup\n      .string()\n      .max(16, `${t('notifications.ErrorName')}`)\n      .trim()\n      .required(`${t('notifications.RequiredName')}`),\n    email: yup\n      .string()\n      .email(`${t('notifications.ErrorEmail')}`)\n      .required(`${t('notifications.RequiredEmail')}`),\n    phone: yup\n      .string()\n      .matches(/^\\+?3?8?(0\\d{9})$/, `${t('notifications.ErrorPhone')}`)\n      .max(13, `${t('notifications.ErrorPhone')}`)\n      .min(13, `${t('notifications.ErrorPhone')}`),\n    skype: yup\n      .string()\n      .max(16, `${t('notifications.ErrorSkypeLong')}`)\n      .min(3, `${t('notifications.ErrorSkypeLong')}`)\n      .matches(/^\\S*$/, `${t('notifications.ErrorSkypeSpace')}`),\n  });\n\n  //поля формы при загрузке страницы\n  const initialValues = {\n    avatarURL: user?.avatarURL,\n    name: user?.name || '',\n    email: user?.email || '',\n    phone: user?.phone || '',\n    skype: user?.skype || '',\n  };\n\n  return (\n    <Wrapper>\n      <Formik\n        dirty\n        initialValues={initialValues}\n        validationSchema={schema}\n        enableReinitialize={true}\n        onSubmit={handleFormSubmit}\n      >\n        {({\n          values,\n          handleSubmit,\n          handleChange,\n          handleBlur,\n          dirty,\n          errors,\n          touched,\n        }) => (\n          <div>\n            <FormUserProfile autoComplete=\"off\" onSubmit={handleSubmit}>\n              <LabelAvatar htmlFor=\"avatarURL\">\n                <AvatarWrapper>\n                  {newAvatar ? (\n                    <Avatar src={newAvatar} alt=\"avatar\" />\n                  ) : (\n                    <Avatar src={user.avatarUrl} alt=\"avatar\" />\n                  )}\n                  <BtnUploadAvatar\n                    type=\"file\"\n                    name=\"avatarURL\"\n                    accept=\".jpg, .jpeg, .png\"\n                    onChange={e => {\n                      setAvatarUrl(e.target.files[0]);\n                      previewFiles(e.target.files[0]);\n                    }}\n                  />\n                </AvatarWrapper>\n              </LabelAvatar>\n\n              <UserName>\n                {values.name ? values.name : initialValues.name}\n              </UserName>\n\n              <UserLabel>{t('accountPage.User')}</UserLabel>\n\n              <MainFieldWrapper>\n                <BlockFieldWrapper>\n                  <FieldWrapper>\n                    <Label\n                      htmlFor=\"name\"\n                      className={`${\n                        touched.name && values.name !== user?.name\n                          ? errors.name\n                            ? 'error'\n                            : 'success'\n                          : ''\n                      }`}\n                    >\n                      {t('accountPage.Name')}\n                      <Input\n                        type=\"text\"\n                        name=\"name\"\n                        value={values.name}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        placeholder={t('accountPage.YourName')}\n                        className={`${\n                          touched.name && values.name !== user?.name\n                            ? errors.name\n                              ? 'error'\n                              : 'success'\n                            : ''\n                        }`}\n                      />\n                      {errors.name && touched.name ? (\n                        <ErrorMassege>{errors.name}</ErrorMassege>\n                      ) : !errors.name &&\n                        touched.name &&\n                        values.name !== user?.name ? (\n                        <ErrorMassege>{t('notifications.Great')}</ErrorMassege>\n                      ) : (\n                        ''\n                      )}\n                      <ErrorCircleIcon\n                        size={24}\n                        className={`${\n                          touched.name && values.name !== user?.name\n                            ? errors.name\n                              ? 'error'\n                              : 'success'\n                            : ''\n                        }`}\n                      />\n                      <CheckCircleIcon\n                        size={24}\n                        className={`${\n                          touched.name && values.name !== user?.name\n                            ? errors.name\n                              ? 'error'\n                              : 'success'\n                            : ''\n                        }`}\n                      />\n                    </Label>\n                  </FieldWrapper>\n\n                  <DatePickerWrapper>\n                    <Label\n                      htmlFor=\"birthday\"\n                      className={`${newBirthday ? 'success' : ''}`}\n                    >\n                      {t('accountPage.Birthday')}\n                      <DatePickerStyles\n                        type={'date'}\n                        input={true}\n                        selected={startDate}\n                        onChange={date => {\n                          setStartDate(date);\n                          if (!date) {\n                            setNewBirthday(null);\n                          } else {\n                            setNewBirthday(date.toLocaleDateString('en-GB'));\n                          }\n                        }}\n                        locale={languageValue}\n                        className={`${newBirthday ? 'success' : ''}`}\n                        minDate={new Date('1923-01-01T00:00:00')}\n                        maxDate={new Date()}\n                        formatWeekDay={nameOfDay => nameOfDay.slice(0, 1)}\n                        calendarStartDay={1}\n                        placeholderText={t('accountPage.Click')}\n                        dateFormat=\"dd.MM.yyyy\"\n                        peekNextMonth\n                        showMonthDropdown\n                        showYearDropdown\n                        dropdownMode=\"select\"\n                      />\n                      <BiChevronDownIcon size={24} />\n                    </Label>\n                  </DatePickerWrapper>\n                  <FieldWrapper>\n                    <Label\n                      htmlFor=\"email\"\n                      className={`${\n                        touched.email && values.email !== user?.email\n                          ? errors.email\n                            ? 'error'\n                            : 'success'\n                          : ''\n                      }`}\n                    >\n                      {t('accountPage.Email')}\n                      <Input\n                        type=\"email\"\n                        name=\"email\"\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.email && values.email !== user?.email\n                            ? errors.email\n                              ? 'error'\n                              : 'success'\n                            : ''\n                        }`}\n                      />\n                      {errors.email && touched.email ? (\n                        <ErrorMassege>{errors.email}</ErrorMassege>\n                      ) : !errors.email &&\n                        touched.email &&\n                        values.email !== user?.email ? (\n                        <ErrorMassege>\n                          `${t('notifications.Great')}`\n                        </ErrorMassege>\n                      ) : (\n                        ''\n                      )}\n\n                      <ErrorCircleIcon\n                        size={24}\n                        className={`${\n                          touched.email && values.email !== user?.email\n                            ? errors.email\n                              ? 'error'\n                              : 'success'\n                            : ''\n                        }`}\n                      />\n                      <CheckCircleIcon\n                        size={24}\n                        className={`${\n                          touched.email && values.email !== user?.email\n                            ? errors.email\n                              ? 'error'\n                              : 'success'\n                            : ''\n                        }`}\n                      />\n                    </Label>\n                  </FieldWrapper>\n                </BlockFieldWrapper>\n                <BlockFieldWrapper>\n                  <FieldWrapper>\n                    <Label\n                      htmlFor=\"phone\"\n                      className={`${\n                        touched.phone &&\n                        values.phone &&\n                        values.phone !== user?.phone\n                          ? errors.phone\n                            ? 'error'\n                            : 'success'\n                          : ''\n                      }`}\n                    >\n                      {t('accountPage.Phone')}\n                      <Input\n                        type=\"text\"\n                        name=\"phone\"\n                        placeholder=\"+380000000000\"\n                        className={`${\n                          touched.phone && values.phone !== user?.phone\n                            ? errors.phone\n                              ? 'error'\n                              : 'success'\n                            : ''\n                        }`}\n                      />\n                      {errors.phone && touched.phone ? (\n                        <ErrorMassege>{errors.phone}</ErrorMassege>\n                      ) : !errors.phone &&\n                        touched.phone &&\n                        values.phone !== user?.phone ? (\n                        <ErrorMassege>\n                          `${t('notifications.Great')}`\n                        </ErrorMassege>\n                      ) : (\n                        ''\n                      )}\n                      <ErrorCircleIcon\n                        size={24}\n                        className={`${\n                          touched.phone && values.phone !== user?.phone\n                            ? errors.phone\n                              ? 'error'\n                              : 'success'\n                            : ''\n                        }`}\n                      />\n                      <CheckCircleIcon\n                        size={24}\n                        className={`${\n                          touched.phone && values.phone !== user?.phone\n                            ? errors.phone\n                              ? 'error'\n                              : 'success'\n                            : ''\n                        }`}\n                      />\n                    </Label>\n                  </FieldWrapper>\n\n                  <FieldWrapper>\n                    <Label\n                      htmlFor=\"skype\"\n                      className={`${\n                        touched.skype && values.skype !== user?.skype\n                          ? errors.skype\n                            ? 'error'\n                            : 'success'\n                          : ''\n                      }`}\n                    >\n                      Skype\n                      <Input\n                        type=\"text\"\n                        name=\"skype\"\n                        value={values.skype ? values.skype : ''}\n                        placeholder={t('accountPage.AddSkype')}\n                        className={`${\n                          touched.skype && values.skype !== user?.skype\n                            ? errors.skype\n                              ? 'error'\n                              : 'success'\n                            : ''\n                        }`}\n                      />\n                      {errors.skype && touched.skype ? (\n                        <ErrorMassege>{errors.skype}</ErrorMassege>\n                      ) : !errors.skype &&\n                        touched.skype &&\n                        values.skype !== user?.skype ? (\n                        <ErrorMassege>\n                          `${t('notifications.Great')}`\n                        </ErrorMassege>\n                      ) : (\n                        ''\n                      )}\n                      <ErrorCircleIcon\n                        size={24}\n                        className={`${\n                          touched.skype && values.skype !== user?.skype\n                            ? errors.skype\n                              ? 'error'\n                              : 'success'\n                            : ''\n                        }`}\n                      />\n                      <CheckCircleIcon\n                        size={24}\n                        className={`${\n                          touched.skype && values.skype !== user?.skype\n                            ? errors.skype\n                              ? 'error'\n                              : 'success'\n                            : ''\n                        }`}\n                      />\n                    </Label>\n                  </FieldWrapper>\n                </BlockFieldWrapper>\n              </MainFieldWrapper>\n\n              {isUpdateForm ? (\n                <SubmitBtn type=\"submit\">\n                  {t('accountPage.SaveChanges')}\n                </SubmitBtn>\n              ) : (\n                <SubmitBtn type=\"submit\" disabled={!dirty}>\n                  {t('accountPage.SaveChanges')}\n                </SubmitBtn>\n              )}\n            </FormUserProfile>\n          </div>\n        )}\n      </Formik>\n      <Toaster />\n    </Wrapper>\n  );\n};\n","import styled from \"styled-components\";\nimport { Form } from 'formik';\nimport VisionIconsLogIn from 'components/VisionIconsLogIn/VisionIconsLogIn.js';\n\nexport const FormStyle = styled(Form)`\ndisplay: flex;\nflex-direction: column;\nwidth: 100%;\n\n\n    @media screen and (min-width: 375px) {\n      width: 299px;\n    }\n\n    @media screen and (min-width: 768px) {\n        width: 354px;\n    }\n     @media screen and (min-width: 1280xpx) {\n        width: 758px;\n    }\n`;\n\nexport const InputWrapper = styled.div`\nposition: relative;\n\n`;\n\nexport const BtnToggleVisiblePassord = styled.button`\nposition: absolute;\ntop: 0;\nright: 0;\nbackground: inherit;\ncursor: pointer;\nheight: 100%;\npadding-top: 10px;\nwidth: 70px;\n\n`;\n\nexport const VisionIcons = styled(VisionIconsLogIn)`\ncolor: ${props => props.theme.colors.buttonsColor};\nwidth: 24px;\nheight: 24px;\n`;\n\nexport const WrapperBtn = styled.div`\n @media screen and (min-width: 768px) {\nmargin-top: 70px;\n    }\n`;\n\n\nexport const FormPasswordName = styled.h2`\nmargin-bottom: 64px;\nfont-size: 20px;\nfont-weight: 700;\ncolor: ${props => props.theme.colors.textColor};\n\n`;\n\n\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectUser } from 'redux/auth/selectors.js';\nimport { changePassord } from 'redux/auth/operations';\n\nimport { Formik } from 'formik';\nimport toast from 'react-hot-toast';\nimport { Toaster } from 'react-hot-toast';\nimport { useTranslation } from 'react-i18next';\n\n\nimport * as yup from 'yup';\n\nimport {\n    FormStyle,\n    InputWrapper,\n    BtnToggleVisiblePassord,\n    VisionIcons,\n    WrapperBtn,\n    FormPasswordName,\n} from './ChangePassord.styled.jsx';\nimport {\n    Input,\n    SubmitBtn,\n    Wrapper,\n    Label,\n    ErrorMassege,\n} from '../UserForm/UserForm.styled.jsx';\n\nexport const ChangePassord = () => {\n    const { t } = useTranslation();\n\n    const user = useSelector(selectUser);\n    const dispatch = useDispatch();\n\n    const [typeOld, setTypeOld] = useState('password');\n    const [typeNew, setTypeNew] = useState('password');\n    const [typeConfirm, setTypeConfirm] = useState('password');\n\n    //схема вадилации\n\n    const schema = yup.object().shape({\n        oldPassword: yup.string().min(1, 'Password must be 1 characters long'),\n        // .matches(/[0-9]/, 'Password requires a number')\n        // .matches(/[a-z]/, 'Password requires a lowercase letter')\n        // .matches(/[A-Z]/, 'Password requires an uppercase letter')\n        // .matches(/[^\\w]/, 'Password requires a symbol')\n        newPassword: yup\n            .string()\n            .min(6, `${t('notifications.ErrorPasswordLong')}`)\n            .max(16, `${t('notifications.ErrorPasswordLong')}`)\n            .matches(/[0-9]/, `${t('notifications.ErrorPasswordDigit')}`)\n            .matches(/[a-z]/, `${t('notifications.ErrorPasswordULowercase')}`)\n            .matches(/[A-Z]/, `${t('notifications.ErrorPasswordUppercase')}`),\n        // .matches(/[^\\w]/, 'Password requires a symbol'),\n        confirmPassword: yup\n            .string()\n            .oneOf(\n                [yup.ref('newPassword'), null],\n                `${t('notifications.ErrorPasswordMatch')}`\n            ),\n    });\n\n    const initialValues = {\n        oldPassword: '',\n        newPassword: '',\n        confirmPassword: '',\n    };\n\n    function togglePassInputNew(e) {\n        const typeBtnPass = e.currentTarget.name;\n\n        switch (typeBtnPass) {\n            case 'oldPassword':\n                typeOld === 'password' ? setTypeOld('text') : setTypeOld('password');\n                break;\n            case 'newPassword':\n                typeNew === 'password' ? setTypeNew('text') : setTypeNew('password');\n                break;\n            case 'confirmPassword':\n                typeConfirm === 'password'\n                    ? setTypeConfirm('text')\n                    : setTypeConfirm('password');\n                break;\n            default:\n                return;\n        }\n    }\n\n    const handleFormSubmit = async (values, { resetForm }) => {\n        try {\n            const data = {\n                email: user?.email,\n                password: values.oldPassword,\n                newPassword: values.newPassword,\n            };\n\n            const { payload } = await dispatch(changePassord(data));\n            switch (payload) {\n                case 200:\n                    toast.success('Successfully!');\n                    break;\n                case 'Request failed with status code 401':\n                    toast.error(`${t('notifications.ErrorPassword')}`);\n                    break;\n                default:\n                    toast.error(`${t('notifications.Oops')}`);\n            }\n        } catch (e) {\n            console.log(e.message);\n        }\n        resetForm();\n    };\n\n    return (\n        <Wrapper>\n            <FormPasswordName> {t('accountPage.ChangePassword')}</FormPasswordName>\n\n            <Formik\n                dirty\n                initialValues={initialValues}\n                validationSchema={schema}\n                enableReinitialize={true}\n                onSubmit={handleFormSubmit}\n            >\n                {({\n                    values,\n                    handleSubmit,\n                    handleChange,\n                    handleBlur,\n                    resetForm,\n                    errors,\n                    touched,\n                }) => (\n                    <div>\n                        <FormStyle autoComplete=\"off\" onSubmit={handleSubmit}>\n                            <InputWrapper>\n                                <Label\n                                    htmlFor=\"oldPassword\"\n                                    className={`${touched.oldPassword && values.oldPassword !== ''\n                                        ? errors.oldPassword\n                                            ? 'error'\n                                            : 'success'\n                                        : ''\n                                        }`}\n                                >\n                                    {t('accountPage.OldPassword')}\n\n                                    <Input\n                                        type={typeOld}\n                                        name=\"oldPassword\"\n                                        value={values.oldPassword}\n                                        placeholder={t('accountPage.EnterOld')}\n                                        onChange={handleChange}\n                                        className={`${touched.oldPassword && values.oldPassword !== ''\n                                            ? errors.oldPassword\n                                                ? 'error'\n                                                : 'success'\n                                            : ''\n                                            }`}\n                                    />\n                                    <BtnToggleVisiblePassord\n                                        type=\"button\"\n                                        name=\"oldPassword\"\n                                        onClick={togglePassInputNew}\n                                    >\n                                        <VisionIcons type={typeOld} />\n                                    </BtnToggleVisiblePassord>\n                                    {errors.oldPassword &&\n                                        touched.oldPassword &&\n                                        values.oldPassword !== '' ? (\n                                        <ErrorMassege>{errors.oldPassword}</ErrorMassege>\n                                    ) : !errors.oldPassword &&\n                                        touched.oldPassword &&\n                                        values.oldPassword !== '' ? (\n                                        <ErrorMassege></ErrorMassege>\n                                    ) : (\n                                        ''\n                                    )}\n                                </Label>\n                            </InputWrapper>\n                            <InputWrapper>\n                                <Label\n                                    htmlFor=\"newPassword\"\n                                    className={`${touched.newPassword && values.newPassword !== ''\n                                        ? errors.newPassword\n                                            ? 'error'\n                                            : 'success'\n                                        : ''\n                                        }`}\n                                >\n                                    {t('accountPage.NewPassword')}\n\n                                    <Input\n                                        type={typeNew}\n                                        name=\"newPassword\"\n                                        value={values.newPassword}\n                                        placeholder={t('accountPage.EnterNew')}\n                                        onChange={handleChange}\n                                        className={`${touched.newPassword && values.newPassword !== ''\n                                            ? errors.newPassword\n                                                ? 'error'\n                                                : 'success'\n                                            : ''\n                                            }`}\n                                    />\n                                    <BtnToggleVisiblePassord\n                                        type=\"button\"\n                                        name=\"newPassword\"\n                                        onClick={togglePassInputNew}\n                                    >\n                                        <VisionIcons type={typeNew} />\n                                    </BtnToggleVisiblePassord>\n                                    {errors.newPassword &&\n                                        touched.newPassword &&\n                                        values.newPassword !== '' ? (\n                                        <ErrorMassege>{errors.newPassword}</ErrorMassege>\n                                    ) : !errors.newPassword &&\n                                        touched.newPassword &&\n                                        values.newPassword !== '' ? (\n                                        <ErrorMassege>{t('notifications.Correct')}</ErrorMassege>\n                                    ) : (\n                                        ''\n                                    )}\n                                </Label>\n                            </InputWrapper>\n                            <InputWrapper>\n                                <Label\n                                    htmlFor=\"confirmPassword\"\n                                    className={`${touched.confirmPassword && values.confirmPassword !== ''\n                                        ? errors.confirmPassword\n                                            ? 'error'\n                                            : 'success'\n                                        : ''\n                                        }`}\n                                >\n\n                                    {t('accountPage.ConfirmPassword')}\n                                    <Input\n                                        type={typeConfirm}\n                                        name=\"confirmPassword\"\n                                        value={values.confirmPassword}\n                                        placeholder={t('accountPage.EnterConfirm')}\n                                        onChange={handleChange}\n                                        className={`${touched.confirmPassword && values.confirmPassword !== ''\n                                            ? errors.confirmPassword\n                                                ? 'error'\n                                                : 'success'\n                                            : ''\n                                            }`}\n                                    />\n                                    <BtnToggleVisiblePassord\n                                        type=\"button\"\n                                        name=\"confirmPassword\"\n                                        onClick={togglePassInputNew}\n                                    >\n                                        <VisionIcons type={typeConfirm} />\n                                    </BtnToggleVisiblePassord>\n                                    {errors.confirmPassword &&\n                                        touched.confirmPassword &&\n                                        values.confirmPassword !== '' ? (\n                                        <ErrorMassege>{errors.confirmPassword}</ErrorMassege>\n                                    ) : !errors.confirmPassword &&\n                                        touched.confirmPassword &&\n                                        values.confirmPassword !== '' ? (\n                                        <ErrorMassege>{t('notifications.Correct')}</ErrorMassege>\n                                    ) : (\n                                        ''\n                                    )}\n                                </Label>\n                            </InputWrapper>\n\n                            <WrapperBtn>\n                                <SubmitBtn\n                                    type=\"submit\"\n                                    disabled={\n                                        !values.oldPassword ||\n                                        !values.newPassword ||\n                                        !values.confirmPassword ||\n                                        errors.oldPassword ||\n                                        errors.newPassword ||\n                                        errors.confirmPassword\n                                    }\n                                >\n                                    {t('accountPage.SaveChanges')}\n                                </SubmitBtn>\n                            </WrapperBtn>\n                        </FormStyle>\n                    </div>\n                )}\n            </Formik>\n            <Toaster />\n        </Wrapper>\n    );\n};\n","import styled from 'styled-components';\n\nexport const AccountPageContainer = styled.div`\n  position: relative;\n  width: 100%;\n  max-width: 1440px;\n  background: inherit;\n\n  font-family: var(--title-font);\n`;\n\nexport const BtnWtapper = styled.div`\n  display: flex;\n`;\n\nexport const ToggleBtn = styled.button`\n  border-radius: 16px 16px 0 0;\n   font-size: 0;\n    width: 50px;\n    height: 31px;\n\n   @media screen and (min-width: 768px) {\n    display: flex;\n    width: 120px;\n    height: 46px;\n    gap: 8px;\n    justify-content: center;\n    align-items: center;\n    font-size: 14px;\n  }\n\n  &.active {\n  background: ${props => props.theme.colors.componentsBgColor};\n  color: ${props => props.theme.colors.textColor};\n\n  }\n  &.notactive {\n    color: ${props => props.theme.colors.sideBarTextColor};\n    background: ${props => props.theme.colors.componentsBgColor};\n    opacity: 0.6;\n  }\n`;\n","import { UserForm } from 'components/UserForm/UserForm';\nimport { ChangePassord } from 'components/ChangePassord/ChangePassord';\nimport { useState } from 'react';\nimport { RiLockPasswordLine, RiFileUserLine } from 'react-icons/ri';\nimport { useTranslation } from 'react-i18next';\n\n\nimport { AccountPageContainer, BtnWtapper, ToggleBtn } from './AccountPage.styled';\n\nexport default function AccountPage() {\n  const [isChangePasswordTab, setIsChangePasswordTab] = useState(false);\n  const { t } = useTranslation();\n\n  return (\n    <div>\n      <AccountPageContainer>\n        <BtnWtapper>\n          <ToggleBtn\n            type=\"button\"\n            className={` ${isChangePasswordTab ? 'notactive' : 'active'}`}\n\n            onClick={() => setIsChangePasswordTab(false)}\n          >\n            <RiFileUserLine size={24} />\n            <p>{t('accountPage.Profile')}</p>\n          </ToggleBtn>\n          <ToggleBtn\n            type=\"button\"\n            className={` ${isChangePasswordTab ? 'active pass' : 'notactive pass'}`}\n\n\n            onClick={() => setIsChangePasswordTab(true)}\n          > <RiLockPasswordLine size={20} />\n            <p>{t('accountPage.Password')}</p>\n          </ToggleBtn>\n        </BtnWtapper>\n        {isChangePasswordTab ? <ChangePassord /> : <UserForm />}\n      </AccountPageContainer>\n    </div>\n  );\n}\n"],"names":["Wrapper","styled","props","theme","colors","componentsBgColor","FormUserProfile","Form","BtnUploadAvatar","Field","buttonsColor","Avatar","LabelAvatar","AvatarWrapper","FieldWrapper","ErrorMassege","ErrorCircleIcon","BiErrorCircle","CheckCircleIcon","BiCheckCircle","BiChevronDownIcon","BiChevronDown","textColor","UserName","UserLabel","accountLabelColor","Input","inputNormal","inputHover","inputError","inputCorrect","Label","MainFieldWrapper","BlockFieldWrapper","SubmitBtn","Primary","DatePickerStyles","DatePicker","DatePickerWrapper","primaryBlueColor","currentdayBgColor","buttonsHoverColor","accentColor","VisionIconsLogIn","type","width","height","xlinkHref","process","fill","UserForm","registerLocale","uk","t","useTranslation","user","useSelector","selectUser","languageValue","selectLanguage","dispatch","useDispatch","useState","avatarUrl","setAvatarUrl","newBirthday","setNewBirthday","newAvatar","setNewAvatar","Date","startDate","setStartDate","isUpdateForm","setIsUpdateForm","useEffect","birthday","newDate","split","reverse","join","parse","handleFormSubmit","values","resetForm","formData","FormData","append","initialValues","name","email","phone","skype","toLocaleDateString","updateUser","res","meta","requestStatus","toast","console","error","schema","yup","shape","max","trim","required","matches","min","avatarURL","dirty","validationSchema","enableReinitialize","onSubmit","handleSubmit","handleChange","handleBlur","errors","touched","autoComplete","htmlFor","src","alt","accept","onChange","e","target","files","avatar","reader","FileReader","readAsDataURL","onloadend","result","previewFiles","className","value","onBlur","placeholder","size","input","selected","date","locale","minDate","maxDate","formatWeekDay","nameOfDay","slice","calendarStartDay","placeholderText","dateFormat","peekNextMonth","showMonthDropdown","showYearDropdown","dropdownMode","disabled","FormStyle","InputWrapper","BtnToggleVisiblePassord","VisionIcons","WrapperBtn","FormPasswordName","ChangePassord","typeOld","setTypeOld","typeNew","setTypeNew","typeConfirm","setTypeConfirm","oldPassword","newPassword","confirmPassword","oneOf","togglePassInputNew","currentTarget","data","password","changePassord","payload","log","message","onClick","AccountPageContainer","BtnWtapper","ToggleBtn","sideBarTextColor","AccountPage","isChangePasswordTab","setIsChangePasswordTab"],"sourceRoot":""}